

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Mon Aug 09 14:42:31 2021

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og1 
     1                           	processor	16F886
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	strings,global,class=STRING,delta=2,noexec
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	inittext,global,class=CODE,delta=2
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	maintext,global,class=CODE,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    16                           	psect	text3,local,class=CODE,merge=1,delta=2
    17                           	psect	text4,local,class=CODE,merge=1,delta=2
    18                           	psect	text5,local,class=CODE,merge=1,delta=2,group=3
    19                           	psect	text6,local,class=CODE,merge=1,delta=2,group=1
    20                           	psect	text7,local,class=CODE,merge=1,delta=2,group=2
    21                           	psect	text8,local,class=CODE,merge=1,delta=2,group=2
    22                           	psect	text9,local,class=CODE,merge=1,delta=2
    23                           	psect	text10,local,class=CODE,merge=1,delta=2
    24                           	psect	text11,local,class=CODE,merge=1,delta=2
    25                           	psect	text12,local,class=CODE,merge=1,delta=2
    26                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    27                           	dabs	1,0x7E,2
    28  0000                     
    29                           ; Version 2.20
    30                           ; Generated 12/02/2020 GMT
    31                           ; 
    32                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    33                           ; All rights reserved.
    34                           ; 
    35                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    36                           ; 
    37                           ; Redistribution and use in source and binary forms, with or without modification, are
    38                           ; permitted provided that the following conditions are met:
    39                           ; 
    40                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    41                           ;        conditions and the following disclaimer.
    42                           ; 
    43                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    44                           ;        of conditions and the following disclaimer in the documentation and/or other
    45                           ;        materials provided with the distribution.
    46                           ; 
    47                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    48                           ;        software without specific prior written permission.
    49                           ; 
    50                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    51                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    52                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    53                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    54                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    55                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    56                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    57                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    58                           ; 
    59                           ; 
    60                           ; Code-generator required, PIC16F886 Definitions
    61                           ; 
    62                           ; SFR Addresses
    63  0000                     	;# 
    64  0001                     	;# 
    65  0002                     	;# 
    66  0003                     	;# 
    67  0004                     	;# 
    68  0005                     	;# 
    69  0006                     	;# 
    70  0007                     	;# 
    71  0009                     	;# 
    72  000A                     	;# 
    73  000B                     	;# 
    74  000C                     	;# 
    75  000D                     	;# 
    76  000E                     	;# 
    77  000E                     	;# 
    78  000F                     	;# 
    79  0010                     	;# 
    80  0011                     	;# 
    81  0012                     	;# 
    82  0013                     	;# 
    83  0014                     	;# 
    84  0015                     	;# 
    85  0015                     	;# 
    86  0016                     	;# 
    87  0017                     	;# 
    88  0018                     	;# 
    89  0019                     	;# 
    90  001A                     	;# 
    91  001B                     	;# 
    92  001B                     	;# 
    93  001C                     	;# 
    94  001D                     	;# 
    95  001E                     	;# 
    96  001F                     	;# 
    97  0081                     	;# 
    98  0085                     	;# 
    99  0086                     	;# 
   100  0087                     	;# 
   101  0089                     	;# 
   102  008C                     	;# 
   103  008D                     	;# 
   104  008E                     	;# 
   105  008F                     	;# 
   106  0090                     	;# 
   107  0091                     	;# 
   108  0092                     	;# 
   109  0093                     	;# 
   110  0093                     	;# 
   111  0093                     	;# 
   112  0094                     	;# 
   113  0095                     	;# 
   114  0096                     	;# 
   115  0097                     	;# 
   116  0098                     	;# 
   117  0099                     	;# 
   118  009A                     	;# 
   119  009B                     	;# 
   120  009C                     	;# 
   121  009D                     	;# 
   122  009E                     	;# 
   123  009F                     	;# 
   124  0105                     	;# 
   125  0107                     	;# 
   126  0108                     	;# 
   127  0109                     	;# 
   128  010C                     	;# 
   129  010C                     	;# 
   130  010D                     	;# 
   131  010E                     	;# 
   132  010F                     	;# 
   133  0185                     	;# 
   134  0187                     	;# 
   135  0188                     	;# 
   136  0189                     	;# 
   137  018C                     	;# 
   138  018D                     	;# 
   139  0000                     	;# 
   140  0001                     	;# 
   141  0002                     	;# 
   142  0003                     	;# 
   143  0004                     	;# 
   144  0005                     	;# 
   145  0006                     	;# 
   146  0007                     	;# 
   147  0009                     	;# 
   148  000A                     	;# 
   149  000B                     	;# 
   150  000C                     	;# 
   151  000D                     	;# 
   152  000E                     	;# 
   153  000E                     	;# 
   154  000F                     	;# 
   155  0010                     	;# 
   156  0011                     	;# 
   157  0012                     	;# 
   158  0013                     	;# 
   159  0014                     	;# 
   160  0015                     	;# 
   161  0015                     	;# 
   162  0016                     	;# 
   163  0017                     	;# 
   164  0018                     	;# 
   165  0019                     	;# 
   166  001A                     	;# 
   167  001B                     	;# 
   168  001B                     	;# 
   169  001C                     	;# 
   170  001D                     	;# 
   171  001E                     	;# 
   172  001F                     	;# 
   173  0081                     	;# 
   174  0085                     	;# 
   175  0086                     	;# 
   176  0087                     	;# 
   177  0089                     	;# 
   178  008C                     	;# 
   179  008D                     	;# 
   180  008E                     	;# 
   181  008F                     	;# 
   182  0090                     	;# 
   183  0091                     	;# 
   184  0092                     	;# 
   185  0093                     	;# 
   186  0093                     	;# 
   187  0093                     	;# 
   188  0094                     	;# 
   189  0095                     	;# 
   190  0096                     	;# 
   191  0097                     	;# 
   192  0098                     	;# 
   193  0099                     	;# 
   194  009A                     	;# 
   195  009B                     	;# 
   196  009C                     	;# 
   197  009D                     	;# 
   198  009E                     	;# 
   199  009F                     	;# 
   200  0105                     	;# 
   201  0107                     	;# 
   202  0108                     	;# 
   203  0109                     	;# 
   204  010C                     	;# 
   205  010C                     	;# 
   206  010D                     	;# 
   207  010E                     	;# 
   208  010F                     	;# 
   209  0185                     	;# 
   210  0187                     	;# 
   211  0188                     	;# 
   212  0189                     	;# 
   213  018C                     	;# 
   214  018D                     	;# 
   215  0000                     	;# 
   216  0001                     	;# 
   217  0002                     	;# 
   218  0003                     	;# 
   219  0004                     	;# 
   220  0005                     	;# 
   221  0006                     	;# 
   222  0007                     	;# 
   223  0009                     	;# 
   224  000A                     	;# 
   225  000B                     	;# 
   226  000C                     	;# 
   227  000D                     	;# 
   228  000E                     	;# 
   229  000E                     	;# 
   230  000F                     	;# 
   231  0010                     	;# 
   232  0011                     	;# 
   233  0012                     	;# 
   234  0013                     	;# 
   235  0014                     	;# 
   236  0015                     	;# 
   237  0015                     	;# 
   238  0016                     	;# 
   239  0017                     	;# 
   240  0018                     	;# 
   241  0019                     	;# 
   242  001A                     	;# 
   243  001B                     	;# 
   244  001B                     	;# 
   245  001C                     	;# 
   246  001D                     	;# 
   247  001E                     	;# 
   248  001F                     	;# 
   249  0081                     	;# 
   250  0085                     	;# 
   251  0086                     	;# 
   252  0087                     	;# 
   253  0089                     	;# 
   254  008C                     	;# 
   255  008D                     	;# 
   256  008E                     	;# 
   257  008F                     	;# 
   258  0090                     	;# 
   259  0091                     	;# 
   260  0092                     	;# 
   261  0093                     	;# 
   262  0093                     	;# 
   263  0093                     	;# 
   264  0094                     	;# 
   265  0095                     	;# 
   266  0096                     	;# 
   267  0097                     	;# 
   268  0098                     	;# 
   269  0099                     	;# 
   270  009A                     	;# 
   271  009B                     	;# 
   272  009C                     	;# 
   273  009D                     	;# 
   274  009E                     	;# 
   275  009F                     	;# 
   276  0105                     	;# 
   277  0107                     	;# 
   278  0108                     	;# 
   279  0109                     	;# 
   280  010C                     	;# 
   281  010C                     	;# 
   282  010D                     	;# 
   283  010E                     	;# 
   284  010F                     	;# 
   285  0185                     	;# 
   286  0187                     	;# 
   287  0188                     	;# 
   288  0189                     	;# 
   289  018C                     	;# 
   290  018D                     	;# 
   291  0000                     	;# 
   292  0001                     	;# 
   293  0002                     	;# 
   294  0003                     	;# 
   295  0004                     	;# 
   296  0005                     	;# 
   297  0006                     	;# 
   298  0007                     	;# 
   299  0009                     	;# 
   300  000A                     	;# 
   301  000B                     	;# 
   302  000C                     	;# 
   303  000D                     	;# 
   304  000E                     	;# 
   305  000E                     	;# 
   306  000F                     	;# 
   307  0010                     	;# 
   308  0011                     	;# 
   309  0012                     	;# 
   310  0013                     	;# 
   311  0014                     	;# 
   312  0015                     	;# 
   313  0015                     	;# 
   314  0016                     	;# 
   315  0017                     	;# 
   316  0018                     	;# 
   317  0019                     	;# 
   318  001A                     	;# 
   319  001B                     	;# 
   320  001B                     	;# 
   321  001C                     	;# 
   322  001D                     	;# 
   323  001E                     	;# 
   324  001F                     	;# 
   325  0081                     	;# 
   326  0085                     	;# 
   327  0086                     	;# 
   328  0087                     	;# 
   329  0089                     	;# 
   330  008C                     	;# 
   331  008D                     	;# 
   332  008E                     	;# 
   333  008F                     	;# 
   334  0090                     	;# 
   335  0091                     	;# 
   336  0092                     	;# 
   337  0093                     	;# 
   338  0093                     	;# 
   339  0093                     	;# 
   340  0094                     	;# 
   341  0095                     	;# 
   342  0096                     	;# 
   343  0097                     	;# 
   344  0098                     	;# 
   345  0099                     	;# 
   346  009A                     	;# 
   347  009B                     	;# 
   348  009C                     	;# 
   349  009D                     	;# 
   350  009E                     	;# 
   351  009F                     	;# 
   352  0105                     	;# 
   353  0107                     	;# 
   354  0108                     	;# 
   355  0109                     	;# 
   356  010C                     	;# 
   357  010C                     	;# 
   358  010D                     	;# 
   359  010E                     	;# 
   360  010F                     	;# 
   361  0185                     	;# 
   362  0187                     	;# 
   363  0188                     	;# 
   364  0189                     	;# 
   365  018C                     	;# 
   366  018D                     	;# 
   367                           
   368                           	psect	idataBANK0
   369  04C7                     __pidataBANK0:
   370                           
   371                           ;initializer for _mensaje
   372  04C7  3450               	retlw	80
   373  04C8  3472               	retlw	114
   374  04C9  346F               	retlw	111
   375  04CA  3467               	retlw	103
   376  04CB  3472               	retlw	114
   377  04CC  3461               	retlw	97
   378  04CD  346D               	retlw	109
   379  04CE  3461               	retlw	97
   380  04CF  3420               	retlw	32
   381  04D0  3449               	retlw	73
   382  04D1  346E               	retlw	110
   383  04D2  3469               	retlw	105
   384  04D3  3463               	retlw	99
   385  04D4  3469               	retlw	105
   386  04D5  3461               	retlw	97
   387  04D6  3464               	retlw	100
   388  04D7  346F               	retlw	111
   389  04D8  3420               	retlw	32
   390  04D9  340A               	retlw	10
   391  04DA  3400               	retlw	0
   392                           
   393                           ;initializer for _ANChannels
   394  04DB  340C               	retlw	12
   395  04DC  340A               	retlw	10
   396  04DD  3408               	retlw	8
   397  04DE  340B               	retlw	11
   398  04DF  340D               	retlw	13
   399  04E0  3404               	retlw	4
   400  04E1  3403               	retlw	3
   401  04E2  3401               	retlw	1
   402                           
   403                           	psect	strings
   404  0003                     __pstrings:
   405  0003                     stringtab:
   406  0003                     __stringtab:
   407  0003                     stringcode:	
   408                           ;	String table - string pointers are 1 byte each
   409                           
   410  0003                     stringdir:
   411  0003  3000               	movlw	high stringdir
   412  0004  008A               	movwf	10
   413  0005  0804               	movf	4,w
   414  0006  0A84               	incf	4,f
   415  0007  0782               	addwf	2,f
   416  0008                     __stringbase:
   417  0008  3400               	retlw	0
   418  0009                     __end_of__stringtab:
   419  0009                     _dpowers:
   420  0009  3401               	retlw	1
   421  000A  3400               	retlw	0
   422  000B  340A               	retlw	10
   423  000C  3400               	retlw	0
   424  000D  3464               	retlw	100
   425  000E  3400               	retlw	0
   426  000F  34E8               	retlw	232
   427  0010  3403               	retlw	3
   428  0011  3410               	retlw	16
   429  0012  3427               	retlw	39
   430  0013                     __end_of_dpowers:
   431  0019                     _TXREG	set	25
   432  001E                     _ADRESH	set	30
   433  001F                     _ADCON0bits	set	31
   434  001F                     _ADCON0	set	31
   435  0039                     _RC1	set	57
   436  00C7                     _SPEN	set	199
   437  005F                     _GIE	set	95
   438  005E                     _PEIE	set	94
   439  0066                     _ADIF	set	102
   440  00F9                     _GO_DONE	set	249
   441  0099                     _SPBRG	set	153
   442  009E                     _ADRESL	set	158
   443  009F                     _ADCON1	set	159
   444  0439                     _TRISC1	set	1081
   445  04C1                     _TRMT	set	1217
   446  04C5                     _TXEN	set	1221
   447  043E                     _TRISC6	set	1086
   448  04C4                     _SYNC	set	1220
   449  04C2                     _BRGH	set	1218
   450  0466                     _ADIE	set	1126
   451  0013                     STR_1:
   452  0013  3425               	retlw	37	;'%'
   453  0014  3464               	retlw	100	;'d'
   454  0015  340A               	retlw	10
   455  0016  3400               	retlw	0
   456                           
   457                           	psect	cinit
   458  07E6                     start_initialization:	
   459                           ; #config settings
   460                           
   461  07E6                     __initialization:
   462                           
   463                           ; Initialize objects allocated to BANK0
   464  07E6  1383               	bcf	3,7	;select IRP bank0
   465  07E7  305E               	movlw	low (__pdataBANK0+28)
   466  07E8  00FD               	movwf	btemp+-1
   467  07E9  3004               	movlw	high __pidataBANK0
   468  07EA  00FE               	movwf	btemp
   469  07EB  30C7               	movlw	low __pidataBANK0
   470  07EC  00FF               	movwf	btemp+1
   471  07ED  3042               	movlw	low __pdataBANK0
   472  07EE  0084               	movwf	4
   473  07EF  120A  118A  2484  120A  118A  	fcall	init_ram0
   474                           
   475                           ; Clear objects allocated to BANK0
   476  07F4  305E               	movlw	low __pbssBANK0
   477  07F5  0084               	movwf	4
   478  07F6  3070               	movlw	low (__pbssBANK0+18)
   479  07F7  120A  118A  246C  120A  118A  	fcall	clear_ram0
   480  07FC                     end_of_initialization:	
   481                           ;End of C runtime variable initialization code
   482                           
   483  07FC                     __end_of__initialization:
   484  07FC  0183               	clrf	3
   485  07FD  120A  118A  2E41   	ljmp	_main	;jump to C main() function
   486                           
   487                           	psect	bssBANK0
   488  005E                     __pbssBANK0:
   489  005E                     _AN0_RES:
   490  005E                     	ds	2
   491  0060                     _ANRead:
   492  0060                     	ds	16
   493                           
   494                           	psect	dataBANK0
   495  0042                     __pdataBANK0:
   496  0042                     _mensaje:
   497  0042                     	ds	20
   498  0056                     _ANChannels:
   499  0056                     	ds	8
   500                           
   501                           	psect	inittext
   502  0480                     init_fetch0:	
   503                           ;	Called with low address in FSR and high address in W
   504                           
   505  0480  087E               	movf	btemp,w
   506  0481  008A               	movwf	10
   507  0482  087F               	movf	btemp+1,w
   508  0483  0082               	movwf	2
   509  0484                     init_ram0:	
   510                           ;Called with:
   511                           ;	high address of idata address in btemp 
   512                           ;	low address of idata address in btemp+1 
   513                           ;	low address of data in FSR
   514                           ;	high address + 1 of data in btemp-1
   515                           
   516  0484  120A  118A  2480  120A  118A  	fcall	init_fetch0
   517  0489  0080               	movwf	0
   518  048A  0A84               	incf	4,f
   519  048B  0804               	movf	4,w
   520  048C  067D               	xorwf	btemp+-1,w
   521  048D  1903               	btfsc	3,2
   522  048E  3400               	retlw	0
   523  048F  0AFF               	incf	btemp+1,f
   524  0490  1903               	btfsc	3,2
   525  0491  0AFE               	incf	btemp,f
   526  0492  2C84               	goto	init_ram0
   527                           
   528                           	psect	clrtext
   529  046C                     clear_ram0:	
   530                           ;	Called with FSR containing the base address, and
   531                           ;	W with the last address+1
   532                           
   533  046C  0064               	clrwdt	;clear the watchdog before getting into this loop
   534  046D                     clrloop0:
   535  046D  0180               	clrf	0	;clear RAM location pointed to by FSR
   536  046E  0A84               	incf	4,f	;increment pointer
   537  046F  0604               	xorwf	4,w	;XOR with final address
   538  0470  1903               	btfsc	3,2	;have we reached the end yet?
   539  0471  3400               	retlw	0	;all done for this memory range, return
   540  0472  0604               	xorwf	4,w	;XOR again to restore value
   541  0473  2C6D               	goto	clrloop0	;do the next byte
   542                           
   543                           	psect	cstackCOMMON
   544  0070                     __pcstackCOMMON:
   545  0070                     ?_UART_Write:
   546  0070                     ??_UART_Write:	
   547                           ; 1 bytes @ 0x0
   548                           
   549  0070                     ?_ADC_init_channel:	
   550                           ; 1 bytes @ 0x0
   551                           
   552  0070                     ??_ADC_init_channel:	
   553                           ; 1 bytes @ 0x0
   554                           
   555  0070                     ?_main:	
   556                           ; 1 bytes @ 0x0
   557                           
   558  0070                     ?_strlen:	
   559                           ; 1 bytes @ 0x0
   560                           
   561  0070                     ?___lwdiv:	
   562                           ; 2 bytes @ 0x0
   563                           
   564  0070                     ?___lldiv:	
   565                           ; 2 bytes @ 0x0
   566                           
   567  0070                     UART_Write@data:	
   568                           ; 4 bytes @ 0x0
   569                           
   570  0070                     ___lwdiv@divisor:	
   571                           ; 1 bytes @ 0x0
   572                           
   573  0070                     ___lldiv@divisor:	
   574                           ; 2 bytes @ 0x0
   575                           
   576                           
   577                           ; 4 bytes @ 0x0
   578  0070                     	ds	2
   579  0072                     ??_strlen:
   580  0072                     ADC_init_channel@channel:	
   581                           ; 1 bytes @ 0x2
   582                           
   583  0072                     ___lwdiv@dividend:	
   584                           ; 1 bytes @ 0x2
   585                           
   586                           
   587                           ; 2 bytes @ 0x2
   588  0072                     	ds	1
   589  0073                     ?_ADC_burst:
   590  0073                     ADC_burst@reading:	
   591                           ; 1 bytes @ 0x3
   592                           
   593  0073                     strlen@cp:	
   594                           ; 1 bytes @ 0x3
   595                           
   596                           
   597                           ; 1 bytes @ 0x3
   598  0073                     	ds	1
   599  0074                     ??___lwdiv:
   600  0074                     ADC_burst@numberc:	
   601                           ; 1 bytes @ 0x4
   602                           
   603  0074                     strlen@s:	
   604                           ; 1 bytes @ 0x4
   605                           
   606  0074                     ___lldiv@dividend:	
   607                           ; 1 bytes @ 0x4
   608                           
   609                           
   610                           ; 4 bytes @ 0x4
   611  0074                     	ds	1
   612  0075                     ??_ADC_burst:
   613  0075                     ?_UART_Buffer:	
   614                           ; 1 bytes @ 0x5
   615                           
   616  0075                     UART_Buffer@size:	
   617                           ; 1 bytes @ 0x5
   618                           
   619  0075                     ___lwdiv@quotient:	
   620                           ; 1 bytes @ 0x5
   621                           
   622                           
   623                           ; 2 bytes @ 0x5
   624  0075                     	ds	1
   625  0076                     ??_UART_Buffer:
   626                           
   627                           ; 1 bytes @ 0x6
   628  0076                     	ds	1
   629  0077                     ADC_burst@channels:
   630  0077                     UART_Buffer@count:	
   631                           ; 1 bytes @ 0x7
   632                           
   633  0077                     ___lwdiv@counter:	
   634                           ; 1 bytes @ 0x7
   635                           
   636                           
   637                           ; 1 bytes @ 0x7
   638  0077                     	ds	1
   639  0078                     ??___lldiv:
   640  0078                     ?___lwmod:	
   641                           ; 1 bytes @ 0x8
   642                           
   643  0078                     ADC_burst@n:	
   644                           ; 2 bytes @ 0x8
   645                           
   646  0078                     UART_Buffer@buffer:	
   647                           ; 1 bytes @ 0x8
   648                           
   649  0078                     ___lwmod@divisor:	
   650                           ; 1 bytes @ 0x8
   651                           
   652                           
   653                           ; 2 bytes @ 0x8
   654  0078                     	ds	1
   655  0079                     ___lldiv@quotient:
   656                           
   657                           ; 4 bytes @ 0x9
   658  0079                     	ds	1
   659  007A                     ___lwmod@dividend:
   660                           
   661                           ; 2 bytes @ 0xA
   662  007A                     	ds	2
   663  007C                     ??___lwmod:
   664                           
   665                           ; 1 bytes @ 0xC
   666  007C                     	ds	1
   667  007D                     ___lldiv@counter:
   668  007D                     ___lwmod@counter:	
   669                           ; 1 bytes @ 0xD
   670                           
   671                           
   672                           ; 1 bytes @ 0xD
   673  007D                     	ds	1
   674                           
   675                           	psect	cstackBANK0
   676  0020                     __pcstackBANK0:
   677  0020                     ?_UART_TX_Init:
   678  0020                     ?_sprintf:	
   679                           ; 1 bytes @ 0x0
   680                           
   681  0020                     sprintf@f:	
   682                           ; 2 bytes @ 0x0
   683                           
   684  0020                     UART_TX_Init@baud:	
   685                           ; 1 bytes @ 0x0
   686                           
   687                           
   688                           ; 4 bytes @ 0x0
   689  0020                     	ds	3
   690  0023                     ??_sprintf:
   691                           
   692                           ; 1 bytes @ 0x3
   693  0023                     	ds	1
   694  0024                     ??_UART_TX_Init:
   695                           
   696                           ; 1 bytes @ 0x4
   697  0024                     	ds	2
   698  0026                     sprintf@ap:
   699                           
   700                           ; 1 bytes @ 0x6
   701  0026                     	ds	1
   702  0027                     sprintf@flag:
   703                           
   704                           ; 1 bytes @ 0x7
   705  0027                     	ds	1
   706  0028                     sprintf@prec:
   707                           
   708                           ; 1 bytes @ 0x8
   709  0028                     	ds	1
   710  0029                     UART_TX_Init@temp:
   711  0029                     sprintf@val:	
   712                           ; 1 bytes @ 0x9
   713                           
   714                           
   715                           ; 2 bytes @ 0x9
   716  0029                     	ds	2
   717  002B                     sprintf@sp:
   718                           
   719                           ; 1 bytes @ 0xB
   720  002B                     	ds	1
   721  002C                     sprintf@c:
   722                           
   723                           ; 1 bytes @ 0xC
   724  002C                     	ds	1
   725  002D                     ?_UART_number:
   726  002D                     UART_number@number:	
   727                           ; 1 bytes @ 0xD
   728                           
   729                           
   730                           ; 2 bytes @ 0xD
   731  002D                     	ds	2
   732  002F                     ??_UART_number:
   733                           
   734                           ; 1 bytes @ 0xF
   735  002F                     	ds	1
   736  0030                     UART_number@buffer:
   737                           
   738                           ; 10 bytes @ 0x10
   739  0030                     	ds	10
   740  003A                     ?_ADC_print_burst:
   741  003A                     ADC_print_burst@NumberReadings:	
   742                           ; 1 bytes @ 0x1A
   743                           
   744                           
   745                           ; 1 bytes @ 0x1A
   746  003A                     	ds	1
   747  003B                     ??_ADC_print_burst:
   748                           
   749                           ; 1 bytes @ 0x1B
   750  003B                     	ds	2
   751  003D                     ADC_print_burst@BurstReadings:
   752                           
   753                           ; 1 bytes @ 0x1D
   754  003D                     	ds	1
   755  003E                     ADC_print_burst@n:
   756                           
   757                           ; 1 bytes @ 0x1E
   758  003E                     	ds	1
   759  003F                     ??_main:
   760                           
   761                           ; 1 bytes @ 0x1F
   762  003F                     	ds	3
   763                           
   764                           	psect	maintext
   765  0641                     __pmaintext:	
   766 ;;
   767 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   768 ;;
   769 ;; *************** function _main *****************
   770 ;; Defined at:
   771 ;;		line 18 in file "2_ADC_Test_Burst.c"
   772 ;; Parameters:    Size  Location     Type
   773 ;;		None
   774 ;; Auto vars:     Size  Location     Type
   775 ;;		None
   776 ;; Return value:  Size  Location     Type
   777 ;;                  1    wreg      void 
   778 ;; Registers used:
   779 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   780 ;; Tracked objects:
   781 ;;		On entry : B00/0
   782 ;;		On exit  : 0/0
   783 ;;		Unchanged: 0/0
   784 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   785 ;;      Params:         0       0       0       0       0
   786 ;;      Locals:         0       0       0       0       0
   787 ;;      Temps:          0       3       0       0       0
   788 ;;      Totals:         0       3       0       0       0
   789 ;;Total ram usage:        3 bytes
   790 ;; Hardware stack levels required when called: 4
   791 ;; This function calls:
   792 ;;		_ADC_burst
   793 ;;		_ADC_print_burst
   794 ;;		_UART_Buffer
   795 ;;		_UART_TX_Init
   796 ;;		_strlen
   797 ;; This function is called by:
   798 ;;		Startup code after reset
   799 ;; This function uses a non-reentrant model
   800 ;;
   801                           
   802                           
   803                           ;psect for function _main
   804  0641                     _main:
   805  0641                     l1220:	
   806                           ;incstack = 0
   807                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   808                           
   809  0641  3000               	movlw	0
   810  0642  1283               	bcf	3,5	;RP0=0, select bank0
   811  0643  1303               	bcf	3,6	;RP1=0, select bank0
   812  0644  00A3               	movwf	UART_TX_Init@baud+3
   813  0645  3000               	movlw	0
   814  0646  00A2               	movwf	UART_TX_Init@baud+2
   815  0647  30E1               	movlw	225
   816  0648  00A1               	movwf	UART_TX_Init@baud+1
   817  0649  3000               	movlw	0
   818  064A  00A0               	movwf	UART_TX_Init@baud
   819  064B  120A  118A  25BC  120A  118A  	fcall	_UART_TX_Init
   820  0650                     l1222:
   821  0650  3042               	movlw	(low (_mensaje| 0))& (0+255)
   822  0651  120A  118A  2493  120A  118A  	fcall	_strlen
   823  0656  0870               	movf	?_strlen,w
   824  0657  1283               	bcf	3,5	;RP0=0, select bank0
   825  0658  1303               	bcf	3,6	;RP1=0, select bank0
   826  0659  00BF               	movwf	??_main
   827  065A  083F               	movf	??_main,w
   828  065B  00F5               	movwf	UART_Buffer@size
   829  065C  3042               	movlw	(low (_mensaje| 0))& (0+255)
   830  065D  120A  118A  24AC  120A  118A  	fcall	_UART_Buffer
   831  0662                     l1224:
   832  0662  1683               	bsf	3,5	;RP0=1, select bank1
   833  0663  1303               	bcf	3,6	;RP1=0, select bank1
   834  0664  1087               	bcf	7,1	;volatile
   835  0665                     l1226:
   836  0665  1283               	bcf	3,5	;RP0=0, select bank0
   837  0666  1303               	bcf	3,6	;RP1=0, select bank0
   838  0667  1487               	bsf	7,1	;volatile
   839  0668                     l1228:
   840  0668  3060               	movlw	(low (_ANRead| 0))& (0+255)
   841  0669  00BF               	movwf	??_main
   842  066A  083F               	movf	??_main,w
   843  066B  00F3               	movwf	ADC_burst@reading
   844  066C  3008               	movlw	8
   845  066D  00C0               	movwf	??_main+1
   846  066E  0840               	movf	??_main+1,w
   847  066F  00F4               	movwf	ADC_burst@numberc
   848  0670  3056               	movlw	(low (_ANChannels| 0))& (0+255)
   849  0671  120A  118A  2551  120A  118A  	fcall	_ADC_burst
   850  0676                     l1230:
   851  0676  3008               	movlw	8
   852  0677  1283               	bcf	3,5	;RP0=0, select bank0
   853  0678  1303               	bcf	3,6	;RP1=0, select bank0
   854  0679  00BF               	movwf	??_main
   855  067A  083F               	movf	??_main,w
   856  067B  00BA               	movwf	ADC_print_burst@NumberReadings
   857  067C  3060               	movlw	(low (_ANRead| 0))& (0+255)
   858  067D  120A  118A  2527  120A  118A  	fcall	_ADC_print_burst
   859  0682                     l1232:
   860  0682  1283               	bcf	3,5	;RP0=0, select bank0
   861  0683  1303               	bcf	3,6	;RP1=0, select bank0
   862  0684  1087               	bcf	7,1	;volatile
   863  0685                     l1234:
   864  0685  3003               	movlw	3
   865  0686  1283               	bcf	3,5	;RP0=0, select bank0
   866  0687  1303               	bcf	3,6	;RP1=0, select bank0
   867  0688  00C1               	movwf	??_main+2
   868  0689  3008               	movlw	8
   869  068A  00C0               	movwf	??_main+1
   870  068B  3076               	movlw	118
   871  068C  00BF               	movwf	??_main
   872  068D                     u737:
   873  068D  0BBF               	decfsz	??_main,f
   874  068E  2E8D               	goto	u737
   875  068F  0BC0               	decfsz	??_main+1,f
   876  0690  2E8D               	goto	u737
   877  0691  0BC1               	decfsz	??_main+2,f
   878  0692  2E8D               	goto	u737
   879  0693  0000               	nop
   880  0694  2E65               	goto	l1226
   881  0695  120A  118A  2800   	ljmp	start
   882  0698                     __end_of_main:
   883                           
   884                           	psect	text1
   885  05BC                     __ptext1:	
   886 ;; *************** function _UART_TX_Init *****************
   887 ;; Defined at:
   888 ;;		line 14 in file "UART.c"
   889 ;; Parameters:    Size  Location     Type
   890 ;;  baud            4    0[BANK0 ] unsigned long 
   891 ;; Auto vars:     Size  Location     Type
   892 ;;  temp            1    9[BANK0 ] unsigned char 
   893 ;; Return value:  Size  Location     Type
   894 ;;                  1    wreg      void 
   895 ;; Registers used:
   896 ;;		wreg, status,2, status,0, pclath, cstack
   897 ;; Tracked objects:
   898 ;;		On entry : 0/0
   899 ;;		On exit  : 0/0
   900 ;;		Unchanged: 0/0
   901 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   902 ;;      Params:         0       4       0       0       0
   903 ;;      Locals:         0       1       0       0       0
   904 ;;      Temps:          0       5       0       0       0
   905 ;;      Totals:         0      10       0       0       0
   906 ;;Total ram usage:       10 bytes
   907 ;; Hardware stack levels used: 1
   908 ;; Hardware stack levels required when called: 1
   909 ;; This function calls:
   910 ;;		___lldiv
   911 ;; This function is called by:
   912 ;;		_main
   913 ;; This function uses a non-reentrant model
   914 ;;
   915                           
   916                           
   917                           ;psect for function _UART_TX_Init
   918  05BC                     _UART_TX_Init:
   919  05BC                     l1206:	
   920                           ;incstack = 0
   921                           ; Regs used in _UART_TX_Init: [wreg+status,2+status,0+pclath+cstack]
   922                           
   923                           
   924                           ;UART.c: 14: void UART_TX_Init(uint32_t baud);UART.c: 15: {;UART.c: 17:   uint8_t temp;;
      +                          UART.c: 18:   temp= (uint8_t)(((16000000/baud)/16)-1);
   925  05BC  1283               	bcf	3,5	;RP0=0, select bank0
   926  05BD  1303               	bcf	3,6	;RP1=0, select bank0
   927  05BE  0823               	movf	UART_TX_Init@baud+3,w
   928  05BF  00F3               	movwf	___lldiv@divisor+3
   929  05C0  0822               	movf	UART_TX_Init@baud+2,w
   930  05C1  00F2               	movwf	___lldiv@divisor+2
   931  05C2  0821               	movf	UART_TX_Init@baud+1,w
   932  05C3  00F1               	movwf	___lldiv@divisor+1
   933  05C4  0820               	movf	UART_TX_Init@baud,w
   934  05C5  00F0               	movwf	___lldiv@divisor
   935  05C6  3000               	movlw	0
   936  05C7  00F7               	movwf	___lldiv@dividend+3
   937  05C8  30F4               	movlw	244
   938  05C9  00F6               	movwf	___lldiv@dividend+2
   939  05CA  3024               	movlw	36
   940  05CB  00F5               	movwf	___lldiv@dividend+1
   941  05CC  3000               	movlw	0
   942  05CD  00F4               	movwf	___lldiv@dividend
   943  05CE  120A  118A  2698  120A  118A  	fcall	___lldiv
   944  05D3  0870               	movf	?___lldiv,w
   945  05D4  1283               	bcf	3,5	;RP0=0, select bank0
   946  05D5  1303               	bcf	3,6	;RP1=0, select bank0
   947  05D6  00A4               	movwf	??_UART_TX_Init
   948  05D7  0871               	movf	?___lldiv+1,w
   949  05D8  00A5               	movwf	??_UART_TX_Init+1
   950  05D9  0872               	movf	?___lldiv+2,w
   951  05DA  00A6               	movwf	??_UART_TX_Init+2
   952  05DB  0873               	movf	?___lldiv+3,w
   953  05DC  00A7               	movwf	??_UART_TX_Init+3
   954  05DD  3004               	movlw	4
   955  05DE                     u725:
   956  05DE  1003               	clrc
   957  05DF  0CA7               	rrf	??_UART_TX_Init+3,f
   958  05E0  0CA6               	rrf	??_UART_TX_Init+2,f
   959  05E1  0CA5               	rrf	??_UART_TX_Init+1,f
   960  05E2  0CA4               	rrf	??_UART_TX_Init,f
   961  05E3                     u720:
   962  05E3  3EFF               	addlw	-1
   963  05E4  1D03               	skipz
   964  05E5  2DDE               	goto	u725
   965  05E6  0824               	movf	??_UART_TX_Init,w
   966  05E7  3EFF               	addlw	255
   967  05E8  00A8               	movwf	??_UART_TX_Init+4
   968  05E9  0828               	movf	??_UART_TX_Init+4,w
   969  05EA  00A9               	movwf	UART_TX_Init@temp
   970  05EB                     l1208:
   971                           
   972                           ;UART.c: 19:   BRGH = 1;
   973  05EB  1683               	bsf	3,5	;RP0=1, select bank1
   974  05EC  1303               	bcf	3,6	;RP1=0, select bank1
   975  05ED  1518               	bsf	24,2	;volatile
   976  05EE                     l1210:
   977                           
   978                           ;UART.c: 20:   SPBRG = temp;
   979  05EE  1283               	bcf	3,5	;RP0=0, select bank0
   980  05EF  1303               	bcf	3,6	;RP1=0, select bank0
   981  05F0  0829               	movf	UART_TX_Init@temp,w
   982  05F1  1683               	bsf	3,5	;RP0=1, select bank1
   983  05F2  1303               	bcf	3,6	;RP1=0, select bank1
   984  05F3  0099               	movwf	25	;volatile
   985  05F4                     l1212:
   986                           
   987                           ;UART.c: 22:   SYNC = 0;
   988  05F4  1218               	bcf	24,4	;volatile
   989  05F5                     l1214:
   990                           
   991                           ;UART.c: 23:   SPEN = 1;
   992  05F5  1283               	bcf	3,5	;RP0=0, select bank0
   993  05F6  1303               	bcf	3,6	;RP1=0, select bank0
   994  05F7  1798               	bsf	24,7	;volatile
   995  05F8                     l1216:
   996                           
   997                           ;UART.c: 25:   TRISC6 = 1;
   998  05F8  1683               	bsf	3,5	;RP0=1, select bank1
   999  05F9  1303               	bcf	3,6	;RP1=0, select bank1
  1000  05FA  1707               	bsf	7,6	;volatile
  1001  05FB                     l1218:
  1002                           
  1003                           ;UART.c: 26:   TXEN = 1;
  1004  05FB  1698               	bsf	24,5	;volatile
  1005  05FC                     l76:
  1006  05FC  0008               	return
  1007  05FD                     __end_of_UART_TX_Init:
  1008                           
  1009                           	psect	text2
  1010  0698                     __ptext2:	
  1011 ;; *************** function ___lldiv *****************
  1012 ;; Defined at:
  1013 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\__lldiv.c"
  1014 ;; Parameters:    Size  Location     Type
  1015 ;;  divisor         4    0[COMMON] unsigned long 
  1016 ;;  dividend        4    4[COMMON] unsigned long 
  1017 ;; Auto vars:     Size  Location     Type
  1018 ;;  quotient        4    9[COMMON] unsigned long 
  1019 ;;  counter         1   13[COMMON] unsigned char 
  1020 ;; Return value:  Size  Location     Type
  1021 ;;                  4    0[COMMON] unsigned long 
  1022 ;; Registers used:
  1023 ;;		wreg, status,2, status,0
  1024 ;; Tracked objects:
  1025 ;;		On entry : 0/0
  1026 ;;		On exit  : 0/0
  1027 ;;		Unchanged: 0/0
  1028 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1029 ;;      Params:         8       0       0       0       0
  1030 ;;      Locals:         5       0       0       0       0
  1031 ;;      Temps:          1       0       0       0       0
  1032 ;;      Totals:        14       0       0       0       0
  1033 ;;Total ram usage:       14 bytes
  1034 ;; Hardware stack levels used: 1
  1035 ;; This function calls:
  1036 ;;		Nothing
  1037 ;; This function is called by:
  1038 ;;		_UART_TX_Init
  1039 ;; This function uses a non-reentrant model
  1040 ;;
  1041                           
  1042                           
  1043                           ;psect for function ___lldiv
  1044  0698                     ___lldiv:
  1045  0698                     l1162:	
  1046                           ;incstack = 0
  1047                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  1048                           
  1049  0698  3000               	movlw	0
  1050  0699  00FC               	movwf	___lldiv@quotient+3
  1051  069A  3000               	movlw	0
  1052  069B  00FB               	movwf	___lldiv@quotient+2
  1053  069C  3000               	movlw	0
  1054  069D  00FA               	movwf	___lldiv@quotient+1
  1055  069E  3000               	movlw	0
  1056  069F  00F9               	movwf	___lldiv@quotient
  1057  06A0  0873               	movf	___lldiv@divisor+3,w
  1058  06A1  0472               	iorwf	___lldiv@divisor+2,w
  1059  06A2  0471               	iorwf	___lldiv@divisor+1,w
  1060  06A3  0470               	iorwf	___lldiv@divisor,w
  1061  06A4  1903               	skipnz
  1062  06A5  2EA7               	goto	u621
  1063  06A6  2EA8               	goto	u620
  1064  06A7                     u621:
  1065  06A7  2EF5               	goto	l1182
  1066  06A8                     u620:
  1067  06A8                     l1164:
  1068  06A8  01FD               	clrf	___lldiv@counter
  1069  06A9  0AFD               	incf	___lldiv@counter,f
  1070  06AA  2EB8               	goto	l1168
  1071  06AB                     l1166:
  1072  06AB  3001               	movlw	1
  1073  06AC  00F8               	movwf	??___lldiv
  1074  06AD                     u635:
  1075  06AD  1003               	clrc
  1076  06AE  0DF0               	rlf	___lldiv@divisor,f
  1077  06AF  0DF1               	rlf	___lldiv@divisor+1,f
  1078  06B0  0DF2               	rlf	___lldiv@divisor+2,f
  1079  06B1  0DF3               	rlf	___lldiv@divisor+3,f
  1080  06B2  0BF8               	decfsz	??___lldiv,f
  1081  06B3  2EAD               	goto	u635
  1082  06B4  3001               	movlw	1
  1083  06B5  00F8               	movwf	??___lldiv
  1084  06B6  0878               	movf	??___lldiv,w
  1085  06B7  07FD               	addwf	___lldiv@counter,f
  1086  06B8                     l1168:
  1087  06B8  1FF3               	btfss	___lldiv@divisor+3,7
  1088  06B9  2EBB               	goto	u641
  1089  06BA  2EBC               	goto	u640
  1090  06BB                     u641:
  1091  06BB  2EAB               	goto	l1166
  1092  06BC                     u640:
  1093  06BC                     l1170:
  1094  06BC  3001               	movlw	1
  1095  06BD  00F8               	movwf	??___lldiv
  1096  06BE                     u655:
  1097  06BE  1003               	clrc
  1098  06BF  0DF9               	rlf	___lldiv@quotient,f
  1099  06C0  0DFA               	rlf	___lldiv@quotient+1,f
  1100  06C1  0DFB               	rlf	___lldiv@quotient+2,f
  1101  06C2  0DFC               	rlf	___lldiv@quotient+3,f
  1102  06C3  0BF8               	decfsz	??___lldiv,f
  1103  06C4  2EBE               	goto	u655
  1104  06C5                     l1172:
  1105  06C5  0873               	movf	___lldiv@divisor+3,w
  1106  06C6  0277               	subwf	___lldiv@dividend+3,w
  1107  06C7  1D03               	skipz
  1108  06C8  2ED3               	goto	u665
  1109  06C9  0872               	movf	___lldiv@divisor+2,w
  1110  06CA  0276               	subwf	___lldiv@dividend+2,w
  1111  06CB  1D03               	skipz
  1112  06CC  2ED3               	goto	u665
  1113  06CD  0871               	movf	___lldiv@divisor+1,w
  1114  06CE  0275               	subwf	___lldiv@dividend+1,w
  1115  06CF  1D03               	skipz
  1116  06D0  2ED3               	goto	u665
  1117  06D1  0870               	movf	___lldiv@divisor,w
  1118  06D2  0274               	subwf	___lldiv@dividend,w
  1119  06D3                     u665:
  1120  06D3  1C03               	skipc
  1121  06D4  2ED6               	goto	u661
  1122  06D5  2ED7               	goto	u660
  1123  06D6                     u661:
  1124  06D6  2EE6               	goto	l1178
  1125  06D7                     u660:
  1126  06D7                     l1174:
  1127  06D7  0870               	movf	___lldiv@divisor,w
  1128  06D8  02F4               	subwf	___lldiv@dividend,f
  1129  06D9  0871               	movf	___lldiv@divisor+1,w
  1130  06DA  1C03               	skipc
  1131  06DB  0F71               	incfsz	___lldiv@divisor+1,w
  1132  06DC  02F5               	subwf	___lldiv@dividend+1,f
  1133  06DD  0872               	movf	___lldiv@divisor+2,w
  1134  06DE  1C03               	skipc
  1135  06DF  0F72               	incfsz	___lldiv@divisor+2,w
  1136  06E0  02F6               	subwf	___lldiv@dividend+2,f
  1137  06E1  0873               	movf	___lldiv@divisor+3,w
  1138  06E2  1C03               	skipc
  1139  06E3  0F73               	incfsz	___lldiv@divisor+3,w
  1140  06E4  02F7               	subwf	___lldiv@dividend+3,f
  1141  06E5                     l1176:
  1142  06E5  1479               	bsf	___lldiv@quotient,0
  1143  06E6                     l1178:
  1144  06E6  3001               	movlw	1
  1145  06E7                     u675:
  1146  06E7  1003               	clrc
  1147  06E8  0CF3               	rrf	___lldiv@divisor+3,f
  1148  06E9  0CF2               	rrf	___lldiv@divisor+2,f
  1149  06EA  0CF1               	rrf	___lldiv@divisor+1,f
  1150  06EB  0CF0               	rrf	___lldiv@divisor,f
  1151  06EC  3EFF               	addlw	-1
  1152  06ED  1D03               	skipz
  1153  06EE  2EE7               	goto	u675
  1154  06EF                     l1180:
  1155  06EF  3001               	movlw	1
  1156  06F0  02FD               	subwf	___lldiv@counter,f
  1157  06F1  1D03               	btfss	3,2
  1158  06F2  2EF4               	goto	u681
  1159  06F3  2EF5               	goto	u680
  1160  06F4                     u681:
  1161  06F4  2EBC               	goto	l1170
  1162  06F5                     u680:
  1163  06F5                     l1182:
  1164  06F5  087C               	movf	___lldiv@quotient+3,w
  1165  06F6  00F3               	movwf	?___lldiv+3
  1166  06F7  087B               	movf	___lldiv@quotient+2,w
  1167  06F8  00F2               	movwf	?___lldiv+2
  1168  06F9  087A               	movf	___lldiv@quotient+1,w
  1169  06FA  00F1               	movwf	?___lldiv+1
  1170  06FB  0879               	movf	___lldiv@quotient,w
  1171  06FC  00F0               	movwf	?___lldiv
  1172  06FD                     l274:
  1173  06FD  0008               	return
  1174  06FE                     __end_of___lldiv:
  1175                           
  1176                           	psect	text3
  1177  0527                     __ptext3:	
  1178 ;; *************** function _ADC_print_burst *****************
  1179 ;; Defined at:
  1180 ;;		line 74 in file "ADC.c"
  1181 ;; Parameters:    Size  Location     Type
  1182 ;;  BurstReading    1    wreg     PTR unsigned int 
  1183 ;;		 -> ANRead(16), 
  1184 ;;  NumberReadin    1   26[BANK0 ] unsigned char 
  1185 ;; Auto vars:     Size  Location     Type
  1186 ;;  BurstReading    1   29[BANK0 ] PTR unsigned int 
  1187 ;;		 -> ANRead(16), 
  1188 ;;  n               1   30[BANK0 ] unsigned char 
  1189 ;; Return value:  Size  Location     Type
  1190 ;;                  1    wreg      void 
  1191 ;; Registers used:
  1192 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1193 ;; Tracked objects:
  1194 ;;		On entry : 0/0
  1195 ;;		On exit  : 0/0
  1196 ;;		Unchanged: 0/0
  1197 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1198 ;;      Params:         0       1       0       0       0
  1199 ;;      Locals:         0       2       0       0       0
  1200 ;;      Temps:          0       2       0       0       0
  1201 ;;      Totals:         0       5       0       0       0
  1202 ;;Total ram usage:        5 bytes
  1203 ;; Hardware stack levels used: 1
  1204 ;; Hardware stack levels required when called: 3
  1205 ;; This function calls:
  1206 ;;		_UART_Write
  1207 ;;		_UART_number
  1208 ;; This function is called by:
  1209 ;;		_main
  1210 ;; This function uses a non-reentrant model
  1211 ;;
  1212                           
  1213                           
  1214                           ;psect for function _ADC_print_burst
  1215  0527                     _ADC_print_burst:
  1216                           
  1217                           ;incstack = 0
  1218                           ; Regs used in _ADC_print_burst: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1219                           ;ADC_print_burst@BurstReadings stored from wreg
  1220  0527  1283               	bcf	3,5	;RP0=0, select bank0
  1221  0528  1303               	bcf	3,6	;RP1=0, select bank0
  1222  0529  00BD               	movwf	ADC_print_burst@BurstReadings
  1223  052A                     l1196:
  1224                           
  1225                           ;ADC.c: 74: void ADC_print_burst(uint16_t *BurstReadings, uint8_t NumberReadings);ADC.c:
      +                           75: {;ADC.c: 76:     for(uint8_t n=0; n<NumberReadings;n++)
  1226  052A  01BE               	clrf	ADC_print_burst@n
  1227  052B  2D44               	goto	l1202
  1228  052C                     l1198:
  1229                           
  1230                           ;ADC.c: 77:         {;ADC.c: 78:             UART_number((int)BurstReadings[n]);
  1231  052C  083E               	movf	ADC_print_burst@n,w
  1232  052D  00BB               	movwf	??_ADC_print_burst
  1233  052E  073B               	addwf	??_ADC_print_burst,w
  1234  052F  073D               	addwf	ADC_print_burst@BurstReadings,w
  1235  0530  00BC               	movwf	??_ADC_print_burst+1
  1236  0531  083C               	movf	??_ADC_print_burst+1,w
  1237  0532  0084               	movwf	4
  1238  0533  1383               	bcf	3,7	;select IRP bank0
  1239  0534  0800               	movf	0,w
  1240  0535  00AD               	movwf	UART_number@number
  1241  0536  0A84               	incf	4,f
  1242  0537  0800               	movf	0,w
  1243  0538  00AE               	movwf	UART_number@number+1
  1244  0539  120A  118A  2504  120A  118A  	fcall	_UART_number
  1245  053E                     l1200:
  1246                           
  1247                           ;ADC.c: 79:         }
  1248  053E  3001               	movlw	1
  1249  053F  1283               	bcf	3,5	;RP0=0, select bank0
  1250  0540  1303               	bcf	3,6	;RP1=0, select bank0
  1251  0541  00BB               	movwf	??_ADC_print_burst
  1252  0542  083B               	movf	??_ADC_print_burst,w
  1253  0543  07BE               	addwf	ADC_print_burst@n,f
  1254  0544                     l1202:
  1255  0544  083A               	movf	ADC_print_burst@NumberReadings,w
  1256  0545  023E               	subwf	ADC_print_burst@n,w
  1257  0546  1C03               	skipc
  1258  0547  2D49               	goto	u711
  1259  0548  2D4A               	goto	u710
  1260  0549                     u711:
  1261  0549  2D2C               	goto	l1198
  1262  054A                     u710:
  1263  054A                     l1204:
  1264                           
  1265                           ;ADC.c: 80:     UART_Write(10);
  1266  054A  300A               	movlw	10
  1267  054B  120A  118A  2474  120A  118A  	fcall	_UART_Write
  1268  0550                     l49:
  1269  0550  0008               	return
  1270  0551                     __end_of_ADC_print_burst:
  1271                           
  1272                           	psect	text4
  1273  0504                     __ptext4:	
  1274 ;; *************** function _UART_number *****************
  1275 ;; Defined at:
  1276 ;;		line 49 in file "UART.c"
  1277 ;; Parameters:    Size  Location     Type
  1278 ;;  number          2   13[BANK0 ] int 
  1279 ;; Auto vars:     Size  Location     Type
  1280 ;;  buffer         10   16[BANK0 ] unsigned char [10]
  1281 ;; Return value:  Size  Location     Type
  1282 ;;                  1    wreg      void 
  1283 ;; Registers used:
  1284 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1285 ;; Tracked objects:
  1286 ;;		On entry : 0/0
  1287 ;;		On exit  : 0/0
  1288 ;;		Unchanged: 0/0
  1289 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1290 ;;      Params:         0       2       0       0       0
  1291 ;;      Locals:         0      10       0       0       0
  1292 ;;      Temps:          0       1       0       0       0
  1293 ;;      Totals:         0      13       0       0       0
  1294 ;;Total ram usage:       13 bytes
  1295 ;; Hardware stack levels used: 1
  1296 ;; Hardware stack levels required when called: 2
  1297 ;; This function calls:
  1298 ;;		_UART_Buffer
  1299 ;;		_sprintf
  1300 ;;		_strlen
  1301 ;; This function is called by:
  1302 ;;		_ADC_print_burst
  1303 ;; This function uses a non-reentrant model
  1304 ;;
  1305                           
  1306                           
  1307                           ;psect for function _UART_number
  1308  0504                     _UART_number:
  1309  0504                     l1158:	
  1310                           ;incstack = 0
  1311                           ; Regs used in _UART_number: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1312                           
  1313                           
  1314                           ;UART.c: 49: void UART_number(int number);UART.c: 50: {;UART.c: 51:  uint8_t buffer[10];
      +                          ;UART.c: 52:  sprintf((char *)buffer,"%d\n",number);
  1315  0504  300B               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1316  0505  1283               	bcf	3,5	;RP0=0, select bank0
  1317  0506  1303               	bcf	3,6	;RP1=0, select bank0
  1318  0507  00AF               	movwf	??_UART_number
  1319  0508  082F               	movf	??_UART_number,w
  1320  0509  00A0               	movwf	sprintf@f
  1321  050A  082E               	movf	UART_number@number+1,w
  1322  050B  00A2               	movwf	?_sprintf+2
  1323  050C  082D               	movf	UART_number@number,w
  1324  050D  00A1               	movwf	?_sprintf+1
  1325  050E  3030               	movlw	(low (UART_number@buffer| 0))& (0+255)
  1326  050F  120A  118A  26FE  120A  118A  	fcall	_sprintf
  1327  0514                     l1160:
  1328                           
  1329                           ;UART.c: 53:  UART_Buffer(buffer,strlen((char *)buffer));
  1330  0514  3030               	movlw	(low (UART_number@buffer| 0))& (0+255)
  1331  0515  120A  118A  2493  120A  118A  	fcall	_strlen
  1332  051A  0870               	movf	?_strlen,w
  1333  051B  1283               	bcf	3,5	;RP0=0, select bank0
  1334  051C  1303               	bcf	3,6	;RP1=0, select bank0
  1335  051D  00AF               	movwf	??_UART_number
  1336  051E  082F               	movf	??_UART_number,w
  1337  051F  00F5               	movwf	UART_Buffer@size
  1338  0520  3030               	movlw	(low (UART_number@buffer| 0))& (0+255)
  1339  0521  120A  118A  24AC  120A  118A  	fcall	_UART_Buffer
  1340  0526                     l94:
  1341  0526  0008               	return
  1342  0527                     __end_of_UART_number:
  1343                           
  1344                           	psect	text5
  1345  0493                     __ptext5:	
  1346 ;; *************** function _strlen *****************
  1347 ;; Defined at:
  1348 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\strlen.c"
  1349 ;; Parameters:    Size  Location     Type
  1350 ;;  s               1    wreg     PTR const unsigned char 
  1351 ;;		 -> mensaje(20), UART_number@buffer(10), 
  1352 ;; Auto vars:     Size  Location     Type
  1353 ;;  s               1    4[COMMON] PTR const unsigned char 
  1354 ;;		 -> mensaje(20), UART_number@buffer(10), 
  1355 ;;  cp              1    3[COMMON] PTR const unsigned char 
  1356 ;;		 -> mensaje(20), UART_number@buffer(10), 
  1357 ;; Return value:  Size  Location     Type
  1358 ;;                  2    0[COMMON] unsigned int 
  1359 ;; Registers used:
  1360 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1361 ;; Tracked objects:
  1362 ;;		On entry : 0/0
  1363 ;;		On exit  : 0/0
  1364 ;;		Unchanged: 0/0
  1365 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1366 ;;      Params:         2       0       0       0       0
  1367 ;;      Locals:         2       0       0       0       0
  1368 ;;      Temps:          1       0       0       0       0
  1369 ;;      Totals:         5       0       0       0       0
  1370 ;;Total ram usage:        5 bytes
  1371 ;; Hardware stack levels used: 1
  1372 ;; This function calls:
  1373 ;;		Nothing
  1374 ;; This function is called by:
  1375 ;;		_UART_number
  1376 ;;		_main
  1377 ;; This function uses a non-reentrant model
  1378 ;;
  1379                           
  1380                           
  1381                           ;psect for function _strlen
  1382  0493                     _strlen:
  1383                           
  1384                           ;incstack = 0
  1385                           ; Regs used in _strlen: [wreg-fsr0h+status,2+status,0]
  1386                           ;strlen@s stored from wreg
  1387  0493  00F4               	movwf	strlen@s
  1388  0494                     l1140:
  1389  0494  0874               	movf	strlen@s,w
  1390  0495  00F2               	movwf	??_strlen
  1391  0496  0872               	movf	??_strlen,w
  1392  0497  00F3               	movwf	strlen@cp
  1393  0498  2C9D               	goto	l1144
  1394  0499                     l1142:
  1395  0499  3001               	movlw	1
  1396  049A  00F2               	movwf	??_strlen
  1397  049B  0872               	movf	??_strlen,w
  1398  049C  07F3               	addwf	strlen@cp,f
  1399  049D                     l1144:
  1400  049D  0873               	movf	strlen@cp,w
  1401  049E  0084               	movwf	4
  1402  049F  1383               	bcf	3,7	;select IRP bank0
  1403  04A0  0800               	movf	0,w
  1404  04A1  1D03               	btfss	3,2
  1405  04A2  2CA4               	goto	u601
  1406  04A3  2CA5               	goto	u600
  1407  04A4                     u601:
  1408  04A4  2C99               	goto	l1142
  1409  04A5                     u600:
  1410  04A5                     l1146:
  1411  04A5  0874               	movf	strlen@s,w
  1412  04A6  0273               	subwf	strlen@cp,w
  1413  04A7  00F0               	movwf	?_strlen
  1414  04A8  01F1               	clrf	?_strlen+1
  1415  04A9  1BF0               	btfsc	?_strlen,7
  1416  04AA  03F1               	decf	?_strlen+1,f
  1417  04AB                     l692:
  1418  04AB  0008               	return
  1419  04AC                     __end_of_strlen:
  1420                           
  1421                           	psect	text6
  1422  06FE                     __ptext6:	
  1423 ;; *************** function _sprintf *****************
  1424 ;; Defined at:
  1425 ;;		line 505 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c"
  1426 ;; Parameters:    Size  Location     Type
  1427 ;;  sp              1    wreg     PTR unsigned char 
  1428 ;;		 -> UART_number@buffer(10), 
  1429 ;;  f               1    0[BANK0 ] PTR const unsigned char 
  1430 ;;		 -> STR_1(4), 
  1431 ;; Auto vars:     Size  Location     Type
  1432 ;;  sp              1   11[BANK0 ] PTR unsigned char 
  1433 ;;		 -> UART_number@buffer(10), 
  1434 ;;  tmpval          4    0        struct .
  1435 ;;  val             2    9[BANK0 ] unsigned int 
  1436 ;;  cp              2    0        PTR const unsigned char 
  1437 ;;  len             2    0        unsigned int 
  1438 ;;  c               1   12[BANK0 ] unsigned char 
  1439 ;;  prec            1    8[BANK0 ] char 
  1440 ;;  flag            1    7[BANK0 ] unsigned char 
  1441 ;;  ap              1    6[BANK0 ] PTR void [1]
  1442 ;;		 -> ?_sprintf(2), 
  1443 ;; Return value:  Size  Location     Type
  1444 ;;                  2    0[BANK0 ] int 
  1445 ;; Registers used:
  1446 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1447 ;; Tracked objects:
  1448 ;;		On entry : 0/0
  1449 ;;		On exit  : 0/0
  1450 ;;		Unchanged: 0/0
  1451 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1452 ;;      Params:         0       3       0       0       0
  1453 ;;      Locals:         0       7       0       0       0
  1454 ;;      Temps:          0       3       0       0       0
  1455 ;;      Totals:         0      13       0       0       0
  1456 ;;Total ram usage:       13 bytes
  1457 ;; Hardware stack levels used: 1
  1458 ;; Hardware stack levels required when called: 1
  1459 ;; This function calls:
  1460 ;;		___lwdiv
  1461 ;;		___lwmod
  1462 ;; This function is called by:
  1463 ;;		_UART_number
  1464 ;; This function uses a non-reentrant model
  1465 ;;
  1466                           
  1467                           
  1468                           ;psect for function _sprintf
  1469  06FE                     _sprintf:
  1470                           
  1471                           ;incstack = 0
  1472                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1473                           ;sprintf@sp stored from wreg
  1474  06FE  1283               	bcf	3,5	;RP0=0, select bank0
  1475  06FF  1303               	bcf	3,6	;RP1=0, select bank0
  1476  0700  00AB               	movwf	sprintf@sp
  1477  0701                     l1078:
  1478                           
  1479                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 505: sprintf(char
      +                           * sp, const char * f, ...);C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\
      +                          doprnt.c: 506: {;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 5
      +                          07:  va_list ap;;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 5
      +                          12:  char c;;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 521: 
      +                           signed char prec;;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c:
      +                           525:  unsigned char flag;
  1480  0701  3021               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  1481  0702  00A3               	movwf	??_sprintf
  1482  0703  0823               	movf	??_sprintf,w
  1483  0704  00A6               	movwf	sprintf@ap
  1484                           
  1485                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  1486  0705  2FCF               	goto	l1130
  1487  0706                     l1080:
  1488                           
  1489                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 555:   if(c != '%
      +                          ')
  1490  0706  3025               	movlw	37
  1491  0707  062C               	xorwf	sprintf@c,w
  1492  0708  1903               	btfsc	3,2
  1493  0709  2F0B               	goto	u531
  1494  070A  2F0C               	goto	u530
  1495  070B                     u531:
  1496  070B  2F18               	goto	l1086
  1497  070C                     u530:
  1498  070C                     l1082:
  1499                           
  1500                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 557:   {;C:\Progr
      +                          am Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 558:    ((*sp++ = (c)));
  1501  070C  082C               	movf	sprintf@c,w
  1502  070D  00A3               	movwf	??_sprintf
  1503  070E  082B               	movf	sprintf@sp,w
  1504  070F  0084               	movwf	4
  1505  0710  0823               	movf	??_sprintf,w
  1506  0711  1383               	bcf	3,7	;select IRP bank0
  1507  0712  0080               	movwf	0
  1508  0713                     l1084:
  1509  0713  3001               	movlw	1
  1510  0714  00A3               	movwf	??_sprintf
  1511  0715  0823               	movf	??_sprintf,w
  1512  0716  07AB               	addwf	sprintf@sp,f
  1513                           
  1514                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 559:    continue;
  1515  0717  2FCF               	goto	l1130
  1516  0718                     l1086:
  1517                           
  1518                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 565:   flag = 0;
  1519  0718  01A7               	clrf	sprintf@flag
  1520  0719                     l1090:	
  1521                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 661:   switch(c =
      +                           *f++) {
  1522                           
  1523  0719  3001               	movlw	1
  1524  071A  07A0               	addwf	sprintf@f,f
  1525  071B  30FF               	movlw	-1
  1526  071C  0720               	addwf	sprintf@f,w
  1527  071D  0084               	movwf	4
  1528  071E  120A  118A  2003  120A  118A  	fcall	stringdir
  1529  0723  00AC               	movwf	sprintf@c
  1530  0724  00A3               	movwf	??_sprintf
  1531  0725  01A4               	clrf	??_sprintf+1
  1532                           
  1533                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1534                           ; Switch size 1, requested type "simple"
  1535                           ; Number of cases is 1, Range of values is 0 to 0
  1536                           ; switch strategies available:
  1537                           ; Name         Instructions Cycles
  1538                           ; simple_byte            4     3 (average)
  1539                           ; direct_byte           11     8 (fixed)
  1540                           ; jumptable            260     6 (fixed)
  1541                           ;	Chosen strategy is simple_byte
  1542  0726  0824               	movf	??_sprintf+1,w
  1543  0727  3A00               	xorlw	0	; case 0
  1544  0728  1903               	skipnz
  1545  0729  2F2B               	goto	l1256
  1546  072A  2FCF               	goto	l1130
  1547  072B                     l1256:
  1548                           
  1549                           ; Switch size 1, requested type "simple"
  1550                           ; Number of cases is 3, Range of values is 0 to 105
  1551                           ; switch strategies available:
  1552                           ; Name         Instructions Cycles
  1553                           ; simple_byte           10     6 (average)
  1554                           ; jumptable            260     6 (fixed)
  1555                           ;	Chosen strategy is simple_byte
  1556  072B  0823               	movf	??_sprintf,w
  1557  072C  3A00               	xorlw	0	; case 0
  1558  072D  1903               	skipnz
  1559  072E  2FE1               	goto	l1132
  1560  072F  3A64               	xorlw	100	; case 100
  1561  0730  1903               	skipnz
  1562  0731  2F36               	goto	l1092
  1563  0732  3A0D               	xorlw	13	; case 105
  1564  0733  1903               	skipnz
  1565  0734  2F36               	goto	l1092
  1566  0735  2FCF               	goto	l1130
  1567  0736                     l1092:
  1568                           
  1569                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1279:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1285:     val = (unsigned
      +                           int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1570  0736  0826               	movf	sprintf@ap,w
  1571  0737  0084               	movwf	4
  1572  0738  1383               	bcf	3,7	;select IRP bank0
  1573  0739  0800               	movf	0,w
  1574  073A  00A9               	movwf	sprintf@val
  1575  073B  0A84               	incf	4,f
  1576  073C  0800               	movf	0,w
  1577  073D  00AA               	movwf	sprintf@val+1
  1578  073E                     l1094:
  1579  073E  3002               	movlw	2
  1580  073F  00A3               	movwf	??_sprintf
  1581  0740  0823               	movf	??_sprintf,w
  1582  0741  07A6               	addwf	sprintf@ap,f
  1583  0742                     l1096:
  1584                           
  1585                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1287:    if((int)
      +                          val < 0) {
  1586  0742  1FAA               	btfss	sprintf@val+1,7
  1587  0743  2F45               	goto	u541
  1588  0744  2F46               	goto	u540
  1589  0745                     u541:
  1590  0745  2F4F               	goto	l1102
  1591  0746                     u540:
  1592  0746                     l1098:
  1593                           
  1594                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1288:     flag |=
      +                           0x03;
  1595  0746  3003               	movlw	3
  1596  0747  00A3               	movwf	??_sprintf
  1597  0748  0823               	movf	??_sprintf,w
  1598  0749  04A7               	iorwf	sprintf@flag,f
  1599  074A                     l1100:
  1600                           
  1601                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1289:     val = -
      +                          val;
  1602  074A  09A9               	comf	sprintf@val,f
  1603  074B  09AA               	comf	sprintf@val+1,f
  1604  074C  0AA9               	incf	sprintf@val,f
  1605  074D  1903               	skipnz
  1606  074E  0AAA               	incf	sprintf@val+1,f
  1607  074F                     l1102:
  1608                           
  1609                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1292:   };C:\Prog
      +                          ram Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1331:    for(c = 1 ; c !=
      +                           sizeof dpowers/sizeof dpowers[0] ; c++)
  1610  074F  01AC               	clrf	sprintf@c
  1611  0750  0AAC               	incf	sprintf@c,f
  1612  0751                     l1108:
  1613                           
  1614                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1332:     if(val 
      +                          < dpowers[c])
  1615  0751  082C               	movf	sprintf@c,w
  1616  0752  00A3               	movwf	??_sprintf
  1617  0753  0723               	addwf	??_sprintf,w
  1618  0754  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1619  0755  0084               	movwf	4
  1620  0756  120A  118A  2003  120A  118A  	fcall	stringdir
  1621  075B  00A4               	movwf	??_sprintf+1
  1622  075C  120A  118A  2003  120A  118A  	fcall	stringdir
  1623  0761  00A5               	movwf	??_sprintf+2
  1624  0762  0825               	movf	??_sprintf+2,w
  1625  0763  022A               	subwf	sprintf@val+1,w
  1626  0764  1D03               	skipz
  1627  0765  2F68               	goto	u555
  1628  0766  0824               	movf	??_sprintf+1,w
  1629  0767  0229               	subwf	sprintf@val,w
  1630  0768                     u555:
  1631  0768  1803               	skipnc
  1632  0769  2F6B               	goto	u551
  1633  076A  2F6C               	goto	u550
  1634  076B                     u551:
  1635  076B  2F6D               	goto	l1112
  1636  076C                     u550:
  1637  076C  2F77               	goto	l1114
  1638  076D                     l1112:
  1639  076D  3001               	movlw	1
  1640  076E  00A3               	movwf	??_sprintf
  1641  076F  0823               	movf	??_sprintf,w
  1642  0770  07AC               	addwf	sprintf@c,f
  1643  0771  3005               	movlw	5
  1644  0772  062C               	xorwf	sprintf@c,w
  1645  0773  1D03               	btfss	3,2
  1646  0774  2F76               	goto	u561
  1647  0775  2F77               	goto	u560
  1648  0776                     u561:
  1649  0776  2F51               	goto	l1108
  1650  0777                     u560:
  1651  0777                     l1114:
  1652                           
  1653                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1448:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1464:    if(flag & 0x03)
  1654  0777  0827               	movf	sprintf@flag,w
  1655  0778  3903               	andlw	3
  1656  0779  1903               	btfsc	3,2
  1657  077A  2F7C               	goto	u571
  1658  077B  2F7D               	goto	u570
  1659  077C                     u571:
  1660  077C  2F88               	goto	l1120
  1661  077D                     u570:
  1662  077D                     l1116:
  1663                           
  1664                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1465:     ((*sp++
      +                           = ('-')));
  1665  077D  302D               	movlw	45
  1666  077E  00A3               	movwf	??_sprintf
  1667  077F  082B               	movf	sprintf@sp,w
  1668  0780  0084               	movwf	4
  1669  0781  0823               	movf	??_sprintf,w
  1670  0782  1383               	bcf	3,7	;select IRP bank0
  1671  0783  0080               	movwf	0
  1672  0784                     l1118:
  1673  0784  3001               	movlw	1
  1674  0785  00A3               	movwf	??_sprintf
  1675  0786  0823               	movf	??_sprintf,w
  1676  0787  07AB               	addwf	sprintf@sp,f
  1677  0788                     l1120:
  1678                           
  1679                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1495:   };C:\Prog
      +                          ram Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1498:   prec = c;
  1680  0788  082C               	movf	sprintf@c,w
  1681  0789  00A3               	movwf	??_sprintf
  1682  078A  0823               	movf	??_sprintf,w
  1683  078B  00A8               	movwf	sprintf@prec
  1684                           
  1685                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  1686  078C  2FC6               	goto	l1128
  1687  078D                     l1122:
  1688                           
  1689                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1504:    {;C:\Pro
      +                          gram Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1515:     c = (val / dpo
      +                          wers[(unsigned char)prec]) % 10 + '0';
  1690  078D  300A               	movlw	10
  1691  078E  00F8               	movwf	___lwmod@divisor
  1692  078F  3000               	movlw	0
  1693  0790  00F9               	movwf	___lwmod@divisor+1
  1694  0791  0828               	movf	sprintf@prec,w
  1695  0792  00A3               	movwf	??_sprintf
  1696  0793  0723               	addwf	??_sprintf,w
  1697  0794  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1698  0795  0084               	movwf	4
  1699  0796  120A  118A  2003  120A  118A  	fcall	stringdir
  1700  079B  00F0               	movwf	___lwdiv@divisor
  1701  079C  120A  118A  2003  120A  118A  	fcall	stringdir
  1702  07A1  00F1               	movwf	___lwdiv@divisor+1
  1703  07A2  082A               	movf	sprintf@val+1,w
  1704  07A3  00F3               	movwf	___lwdiv@dividend+1
  1705  07A4  0829               	movf	sprintf@val,w
  1706  07A5  00F2               	movwf	___lwdiv@dividend
  1707  07A6  120A  118A  25FD  120A  118A  	fcall	___lwdiv
  1708  07AB  0871               	movf	?___lwdiv+1,w
  1709  07AC  00FB               	movwf	___lwmod@dividend+1
  1710  07AD  0870               	movf	?___lwdiv,w
  1711  07AE  00FA               	movwf	___lwmod@dividend
  1712  07AF  120A  118A  2582  120A  118A  	fcall	___lwmod
  1713  07B4  0878               	movf	?___lwmod,w
  1714  07B5  3E30               	addlw	48
  1715  07B6  1283               	bcf	3,5	;RP0=0, select bank0
  1716  07B7  1303               	bcf	3,6	;RP1=0, select bank0
  1717  07B8  00A4               	movwf	??_sprintf+1
  1718  07B9  0824               	movf	??_sprintf+1,w
  1719  07BA  00AC               	movwf	sprintf@c
  1720  07BB                     l1124:
  1721                           
  1722                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1549:    };C:\Pro
      +                          gram Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1550:    ((*sp++ = (c)))
      +                          ;
  1723  07BB  082C               	movf	sprintf@c,w
  1724  07BC  00A3               	movwf	??_sprintf
  1725  07BD  082B               	movf	sprintf@sp,w
  1726  07BE  0084               	movwf	4
  1727  07BF  0823               	movf	??_sprintf,w
  1728  07C0  1383               	bcf	3,7	;select IRP bank0
  1729  07C1  0080               	movwf	0
  1730  07C2                     l1126:
  1731  07C2  3001               	movlw	1
  1732  07C3  00A3               	movwf	??_sprintf
  1733  07C4  0823               	movf	??_sprintf,w
  1734  07C5  07AB               	addwf	sprintf@sp,f
  1735  07C6                     l1128:
  1736                           
  1737                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  1738  07C6  30FF               	movlw	255
  1739  07C7  00A3               	movwf	??_sprintf
  1740  07C8  0823               	movf	??_sprintf,w
  1741  07C9  07A8               	addwf	sprintf@prec,f
  1742  07CA  0A28               	incf	sprintf@prec,w
  1743  07CB  1D03               	btfss	3,2
  1744  07CC  2FCE               	goto	u581
  1745  07CD  2FCF               	goto	u580
  1746  07CE                     u581:
  1747  07CE  2F8D               	goto	l1122
  1748  07CF                     u580:
  1749  07CF                     l1130:
  1750                           
  1751                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  1752  07CF  3001               	movlw	1
  1753  07D0  07A0               	addwf	sprintf@f,f
  1754  07D1  30FF               	movlw	-1
  1755  07D2  0720               	addwf	sprintf@f,w
  1756  07D3  0084               	movwf	4
  1757  07D4  120A  118A  2003  120A  118A  	fcall	stringdir
  1758  07D9  00A3               	movwf	??_sprintf
  1759  07DA  0823               	movf	??_sprintf,w
  1760  07DB  00AC               	movwf	sprintf@c
  1761  07DC  082C               	movf	sprintf@c,w
  1762  07DD  1D03               	btfss	3,2
  1763  07DE  2FE0               	goto	u591
  1764  07DF  2FE1               	goto	u590
  1765  07E0                     u591:
  1766  07E0  2F06               	goto	l1080
  1767  07E1                     u590:
  1768  07E1                     l1132:
  1769                           
  1770                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1564:  *sp = 0;
  1771  07E1  082B               	movf	sprintf@sp,w
  1772  07E2  0084               	movwf	4
  1773  07E3  1383               	bcf	3,7	;select IRP bank0
  1774  07E4  0180               	clrf	0
  1775  07E5                     l234:
  1776  07E5  0008               	return
  1777  07E6                     __end_of_sprintf:
  1778                           
  1779                           	psect	text7
  1780  0582                     __ptext7:	
  1781 ;; *************** function ___lwmod *****************
  1782 ;; Defined at:
  1783 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\lwmod.c"
  1784 ;; Parameters:    Size  Location     Type
  1785 ;;  divisor         2    8[COMMON] unsigned int 
  1786 ;;  dividend        2   10[COMMON] unsigned int 
  1787 ;; Auto vars:     Size  Location     Type
  1788 ;;  counter         1   13[COMMON] unsigned char 
  1789 ;; Return value:  Size  Location     Type
  1790 ;;                  2    8[COMMON] unsigned int 
  1791 ;; Registers used:
  1792 ;;		wreg, status,2, status,0
  1793 ;; Tracked objects:
  1794 ;;		On entry : 0/0
  1795 ;;		On exit  : 0/0
  1796 ;;		Unchanged: 0/0
  1797 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1798 ;;      Params:         4       0       0       0       0
  1799 ;;      Locals:         1       0       0       0       0
  1800 ;;      Temps:          1       0       0       0       0
  1801 ;;      Totals:         6       0       0       0       0
  1802 ;;Total ram usage:        6 bytes
  1803 ;; Hardware stack levels used: 1
  1804 ;; This function calls:
  1805 ;;		Nothing
  1806 ;; This function is called by:
  1807 ;;		_sprintf
  1808 ;; This function uses a non-reentrant model
  1809 ;;
  1810                           
  1811                           
  1812                           ;psect for function ___lwmod
  1813  0582                     ___lwmod:
  1814  0582                     l1046:	
  1815                           ;incstack = 0
  1816                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  1817                           
  1818  0582  0878               	movf	___lwmod@divisor,w
  1819  0583  0479               	iorwf	___lwmod@divisor+1,w
  1820  0584  1903               	btfsc	3,2
  1821  0585  2D87               	goto	u461
  1822  0586  2D88               	goto	u460
  1823  0587                     u461:
  1824  0587  2DB7               	goto	l1064
  1825  0588                     u460:
  1826  0588                     l1048:
  1827  0588  01FD               	clrf	___lwmod@counter
  1828  0589  0AFD               	incf	___lwmod@counter,f
  1829  058A  2D96               	goto	l1054
  1830  058B                     l1050:
  1831  058B  3001               	movlw	1
  1832  058C                     u475:
  1833  058C  1003               	clrc
  1834  058D  0DF8               	rlf	___lwmod@divisor,f
  1835  058E  0DF9               	rlf	___lwmod@divisor+1,f
  1836  058F  3EFF               	addlw	-1
  1837  0590  1D03               	skipz
  1838  0591  2D8C               	goto	u475
  1839  0592                     l1052:
  1840  0592  3001               	movlw	1
  1841  0593  00FC               	movwf	??___lwmod
  1842  0594  087C               	movf	??___lwmod,w
  1843  0595  07FD               	addwf	___lwmod@counter,f
  1844  0596                     l1054:
  1845  0596  1FF9               	btfss	___lwmod@divisor+1,7
  1846  0597  2D99               	goto	u481
  1847  0598  2D9A               	goto	u480
  1848  0599                     u481:
  1849  0599  2D8B               	goto	l1050
  1850  059A                     u480:
  1851  059A                     l1056:
  1852  059A  0879               	movf	___lwmod@divisor+1,w
  1853  059B  027B               	subwf	___lwmod@dividend+1,w
  1854  059C  1D03               	skipz
  1855  059D  2DA0               	goto	u495
  1856  059E  0878               	movf	___lwmod@divisor,w
  1857  059F  027A               	subwf	___lwmod@dividend,w
  1858  05A0                     u495:
  1859  05A0  1C03               	skipc
  1860  05A1  2DA3               	goto	u491
  1861  05A2  2DA4               	goto	u490
  1862  05A3                     u491:
  1863  05A3  2DAA               	goto	l1060
  1864  05A4                     u490:
  1865  05A4                     l1058:
  1866  05A4  0878               	movf	___lwmod@divisor,w
  1867  05A5  02FA               	subwf	___lwmod@dividend,f
  1868  05A6  0879               	movf	___lwmod@divisor+1,w
  1869  05A7  1C03               	skipc
  1870  05A8  03FB               	decf	___lwmod@dividend+1,f
  1871  05A9  02FB               	subwf	___lwmod@dividend+1,f
  1872  05AA                     l1060:
  1873  05AA  3001               	movlw	1
  1874  05AB                     u505:
  1875  05AB  1003               	clrc
  1876  05AC  0CF9               	rrf	___lwmod@divisor+1,f
  1877  05AD  0CF8               	rrf	___lwmod@divisor,f
  1878  05AE  3EFF               	addlw	-1
  1879  05AF  1D03               	skipz
  1880  05B0  2DAB               	goto	u505
  1881  05B1                     l1062:
  1882  05B1  3001               	movlw	1
  1883  05B2  02FD               	subwf	___lwmod@counter,f
  1884  05B3  1D03               	btfss	3,2
  1885  05B4  2DB6               	goto	u511
  1886  05B5  2DB7               	goto	u510
  1887  05B6                     u511:
  1888  05B6  2D9A               	goto	l1056
  1889  05B7                     u510:
  1890  05B7                     l1064:
  1891  05B7  087B               	movf	___lwmod@dividend+1,w
  1892  05B8  00F9               	movwf	?___lwmod+1
  1893  05B9  087A               	movf	___lwmod@dividend,w
  1894  05BA  00F8               	movwf	?___lwmod
  1895  05BB                     l520:
  1896  05BB  0008               	return
  1897  05BC                     __end_of___lwmod:
  1898                           
  1899                           	psect	text8
  1900  05FD                     __ptext8:	
  1901 ;; *************** function ___lwdiv *****************
  1902 ;; Defined at:
  1903 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\lwdiv.c"
  1904 ;; Parameters:    Size  Location     Type
  1905 ;;  divisor         2    0[COMMON] unsigned int 
  1906 ;;  dividend        2    2[COMMON] unsigned int 
  1907 ;; Auto vars:     Size  Location     Type
  1908 ;;  quotient        2    5[COMMON] unsigned int 
  1909 ;;  counter         1    7[COMMON] unsigned char 
  1910 ;; Return value:  Size  Location     Type
  1911 ;;                  2    0[COMMON] unsigned int 
  1912 ;; Registers used:
  1913 ;;		wreg, status,2, status,0
  1914 ;; Tracked objects:
  1915 ;;		On entry : 0/0
  1916 ;;		On exit  : 0/0
  1917 ;;		Unchanged: 0/0
  1918 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1919 ;;      Params:         4       0       0       0       0
  1920 ;;      Locals:         3       0       0       0       0
  1921 ;;      Temps:          1       0       0       0       0
  1922 ;;      Totals:         8       0       0       0       0
  1923 ;;Total ram usage:        8 bytes
  1924 ;; Hardware stack levels used: 1
  1925 ;; This function calls:
  1926 ;;		Nothing
  1927 ;; This function is called by:
  1928 ;;		_sprintf
  1929 ;; This function uses a non-reentrant model
  1930 ;;
  1931                           
  1932                           
  1933                           ;psect for function ___lwdiv
  1934  05FD                     ___lwdiv:
  1935  05FD                     l1020:	
  1936                           ;incstack = 0
  1937                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1938                           
  1939  05FD  01F5               	clrf	___lwdiv@quotient
  1940  05FE  01F6               	clrf	___lwdiv@quotient+1
  1941  05FF                     l1022:
  1942  05FF  0870               	movf	___lwdiv@divisor,w
  1943  0600  0471               	iorwf	___lwdiv@divisor+1,w
  1944  0601  1903               	btfsc	3,2
  1945  0602  2E04               	goto	u391
  1946  0603  2E05               	goto	u390
  1947  0604                     u391:
  1948  0604  2E3C               	goto	l1042
  1949  0605                     u390:
  1950  0605                     l1024:
  1951  0605  01F7               	clrf	___lwdiv@counter
  1952  0606  0AF7               	incf	___lwdiv@counter,f
  1953  0607  2E13               	goto	l1030
  1954  0608                     l1026:
  1955  0608  3001               	movlw	1
  1956  0609                     u405:
  1957  0609  1003               	clrc
  1958  060A  0DF0               	rlf	___lwdiv@divisor,f
  1959  060B  0DF1               	rlf	___lwdiv@divisor+1,f
  1960  060C  3EFF               	addlw	-1
  1961  060D  1D03               	skipz
  1962  060E  2E09               	goto	u405
  1963  060F                     l1028:
  1964  060F  3001               	movlw	1
  1965  0610  00F4               	movwf	??___lwdiv
  1966  0611  0874               	movf	??___lwdiv,w
  1967  0612  07F7               	addwf	___lwdiv@counter,f
  1968  0613                     l1030:
  1969  0613  1FF1               	btfss	___lwdiv@divisor+1,7
  1970  0614  2E16               	goto	u411
  1971  0615  2E17               	goto	u410
  1972  0616                     u411:
  1973  0616  2E08               	goto	l1026
  1974  0617                     u410:
  1975  0617                     l1032:
  1976  0617  3001               	movlw	1
  1977  0618                     u425:
  1978  0618  1003               	clrc
  1979  0619  0DF5               	rlf	___lwdiv@quotient,f
  1980  061A  0DF6               	rlf	___lwdiv@quotient+1,f
  1981  061B  3EFF               	addlw	-1
  1982  061C  1D03               	skipz
  1983  061D  2E18               	goto	u425
  1984  061E  0871               	movf	___lwdiv@divisor+1,w
  1985  061F  0273               	subwf	___lwdiv@dividend+1,w
  1986  0620  1D03               	skipz
  1987  0621  2E24               	goto	u435
  1988  0622  0870               	movf	___lwdiv@divisor,w
  1989  0623  0272               	subwf	___lwdiv@dividend,w
  1990  0624                     u435:
  1991  0624  1C03               	skipc
  1992  0625  2E27               	goto	u431
  1993  0626  2E28               	goto	u430
  1994  0627                     u431:
  1995  0627  2E2F               	goto	l1038
  1996  0628                     u430:
  1997  0628                     l1034:
  1998  0628  0870               	movf	___lwdiv@divisor,w
  1999  0629  02F2               	subwf	___lwdiv@dividend,f
  2000  062A  0871               	movf	___lwdiv@divisor+1,w
  2001  062B  1C03               	skipc
  2002  062C  03F3               	decf	___lwdiv@dividend+1,f
  2003  062D  02F3               	subwf	___lwdiv@dividend+1,f
  2004  062E                     l1036:
  2005  062E  1475               	bsf	___lwdiv@quotient,0
  2006  062F                     l1038:
  2007  062F  3001               	movlw	1
  2008  0630                     u445:
  2009  0630  1003               	clrc
  2010  0631  0CF1               	rrf	___lwdiv@divisor+1,f
  2011  0632  0CF0               	rrf	___lwdiv@divisor,f
  2012  0633  3EFF               	addlw	-1
  2013  0634  1D03               	skipz
  2014  0635  2E30               	goto	u445
  2015  0636                     l1040:
  2016  0636  3001               	movlw	1
  2017  0637  02F7               	subwf	___lwdiv@counter,f
  2018  0638  1D03               	btfss	3,2
  2019  0639  2E3B               	goto	u451
  2020  063A  2E3C               	goto	u450
  2021  063B                     u451:
  2022  063B  2E17               	goto	l1032
  2023  063C                     u450:
  2024  063C                     l1042:
  2025  063C  0876               	movf	___lwdiv@quotient+1,w
  2026  063D  00F1               	movwf	?___lwdiv+1
  2027  063E  0875               	movf	___lwdiv@quotient,w
  2028  063F  00F0               	movwf	?___lwdiv
  2029  0640                     l510:
  2030  0640  0008               	return
  2031  0641                     __end_of___lwdiv:
  2032                           
  2033                           	psect	text9
  2034  04AC                     __ptext9:	
  2035 ;; *************** function _UART_Buffer *****************
  2036 ;; Defined at:
  2037 ;;		line 39 in file "UART.c"
  2038 ;; Parameters:    Size  Location     Type
  2039 ;;  buffer          1    wreg     PTR unsigned char 
  2040 ;;		 -> mensaje(20), UART_number@buffer(10), 
  2041 ;;  size            1    5[COMMON] unsigned char 
  2042 ;; Auto vars:     Size  Location     Type
  2043 ;;  buffer          1    8[COMMON] PTR unsigned char 
  2044 ;;		 -> mensaje(20), UART_number@buffer(10), 
  2045 ;;  count           1    7[COMMON] unsigned char 
  2046 ;; Return value:  Size  Location     Type
  2047 ;;                  1    wreg      void 
  2048 ;; Registers used:
  2049 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2050 ;; Tracked objects:
  2051 ;;		On entry : 0/0
  2052 ;;		On exit  : 0/0
  2053 ;;		Unchanged: 0/0
  2054 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2055 ;;      Params:         1       0       0       0       0
  2056 ;;      Locals:         2       0       0       0       0
  2057 ;;      Temps:          1       0       0       0       0
  2058 ;;      Totals:         4       0       0       0       0
  2059 ;;Total ram usage:        4 bytes
  2060 ;; Hardware stack levels used: 1
  2061 ;; Hardware stack levels required when called: 1
  2062 ;; This function calls:
  2063 ;;		_UART_Write
  2064 ;; This function is called by:
  2065 ;;		_UART_number
  2066 ;;		_main
  2067 ;; This function uses a non-reentrant model
  2068 ;;
  2069                           
  2070                           
  2071                           ;psect for function _UART_Buffer
  2072  04AC                     _UART_Buffer:
  2073                           
  2074                           ;incstack = 0
  2075                           ; Regs used in _UART_Buffer: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2076                           ;UART_Buffer@buffer stored from wreg
  2077  04AC  00F8               	movwf	UART_Buffer@buffer
  2078  04AD                     l1068:
  2079                           
  2080                           ;UART.c: 39: void UART_Buffer(uint8_t *buffer, uint8_t size);UART.c: 40: {;UART.c: 41:  
      +                             char count=0;
  2081  04AD  01F7               	clrf	UART_Buffer@count
  2082                           
  2083                           ;UART.c: 42:     while(count<size)
  2084  04AE  2CC0               	goto	l1076
  2085  04AF                     l1070:
  2086                           
  2087                           ;UART.c: 43:     {;UART.c: 44:         UART_Write(*buffer);
  2088  04AF  0878               	movf	UART_Buffer@buffer,w
  2089  04B0  0084               	movwf	4
  2090  04B1  1383               	bcf	3,7	;select IRP bank0
  2091  04B2  0800               	movf	0,w
  2092  04B3  120A  118A  2474  120A  118A  	fcall	_UART_Write
  2093  04B8                     l1072:
  2094                           
  2095                           ;UART.c: 45:         count++;
  2096  04B8  3001               	movlw	1
  2097  04B9  00F6               	movwf	??_UART_Buffer
  2098  04BA  0876               	movf	??_UART_Buffer,w
  2099  04BB  07F7               	addwf	UART_Buffer@count,f
  2100  04BC                     l1074:
  2101                           
  2102                           ;UART.c: 46:         buffer++;
  2103  04BC  3001               	movlw	1
  2104  04BD  00F6               	movwf	??_UART_Buffer
  2105  04BE  0876               	movf	??_UART_Buffer,w
  2106  04BF  07F8               	addwf	UART_Buffer@buffer,f
  2107  04C0                     l1076:
  2108                           
  2109                           ;UART.c: 42:     while(count<size)
  2110  04C0  0875               	movf	UART_Buffer@size,w
  2111  04C1  0277               	subwf	UART_Buffer@count,w
  2112  04C2  1C03               	skipc
  2113  04C3  2CC5               	goto	u521
  2114  04C4  2CC6               	goto	u520
  2115  04C5                     u521:
  2116  04C5  2CAF               	goto	l1070
  2117  04C6                     u520:
  2118  04C6                     l91:
  2119  04C6  0008               	return
  2120  04C7                     __end_of_UART_Buffer:
  2121                           
  2122                           	psect	text10
  2123  0474                     __ptext10:	
  2124 ;; *************** function _UART_Write *****************
  2125 ;; Defined at:
  2126 ;;		line 28 in file "UART.c"
  2127 ;; Parameters:    Size  Location     Type
  2128 ;;  data            1    wreg     unsigned char 
  2129 ;; Auto vars:     Size  Location     Type
  2130 ;;  data            1    0[COMMON] unsigned char 
  2131 ;; Return value:  Size  Location     Type
  2132 ;;                  1    wreg      void 
  2133 ;; Registers used:
  2134 ;;		wreg
  2135 ;; Tracked objects:
  2136 ;;		On entry : 0/0
  2137 ;;		On exit  : 0/0
  2138 ;;		Unchanged: 0/0
  2139 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2140 ;;      Params:         0       0       0       0       0
  2141 ;;      Locals:         1       0       0       0       0
  2142 ;;      Temps:          0       0       0       0       0
  2143 ;;      Totals:         1       0       0       0       0
  2144 ;;Total ram usage:        1 bytes
  2145 ;; Hardware stack levels used: 1
  2146 ;; This function calls:
  2147 ;;		Nothing
  2148 ;; This function is called by:
  2149 ;;		_ADC_print_burst
  2150 ;;		_UART_Buffer
  2151 ;; This function uses a non-reentrant model
  2152 ;;
  2153                           
  2154                           
  2155                           ;psect for function _UART_Write
  2156  0474                     _UART_Write:
  2157                           
  2158                           ;incstack = 0
  2159                           ; Regs used in _UART_Write: [wreg]
  2160                           ;UART_Write@data stored from wreg
  2161  0474  00F0               	movwf	UART_Write@data
  2162  0475                     l1016:
  2163  0475                     l79:	
  2164                           ;UART.c: 28: void UART_Write(uint8_t data);UART.c: 29: {;UART.c: 30:   while(!TRMT);
  2165                           
  2166  0475  1683               	bsf	3,5	;RP0=1, select bank1
  2167  0476  1303               	bcf	3,6	;RP1=0, select bank1
  2168  0477  1C98               	btfss	24,1	;volatile
  2169  0478  2C7A               	goto	u381
  2170  0479  2C7B               	goto	u380
  2171  047A                     u381:
  2172  047A  2C75               	goto	l79
  2173  047B                     u380:
  2174  047B                     l1018:
  2175                           
  2176                           ;UART.c: 31:   TXREG = data;
  2177  047B  0870               	movf	UART_Write@data,w
  2178  047C  1283               	bcf	3,5	;RP0=0, select bank0
  2179  047D  1303               	bcf	3,6	;RP1=0, select bank0
  2180  047E  0099               	movwf	25	;volatile
  2181  047F                     l82:
  2182  047F  0008               	return
  2183  0480                     __end_of_UART_Write:
  2184                           
  2185                           	psect	text11
  2186  0551                     __ptext11:	
  2187 ;; *************** function _ADC_burst *****************
  2188 ;; Defined at:
  2189 ;;		line 64 in file "ADC.c"
  2190 ;; Parameters:    Size  Location     Type
  2191 ;;  channels        1    wreg     PTR unsigned char 
  2192 ;;		 -> ANChannels(8), 
  2193 ;;  reading         1    3[COMMON] PTR unsigned int 
  2194 ;;		 -> ANRead(16), 
  2195 ;;  numberc         1    4[COMMON] unsigned char 
  2196 ;; Auto vars:     Size  Location     Type
  2197 ;;  channels        1    7[COMMON] PTR unsigned char 
  2198 ;;		 -> ANChannels(8), 
  2199 ;;  n               1    8[COMMON] unsigned char 
  2200 ;; Return value:  Size  Location     Type
  2201 ;;                  1    wreg      void 
  2202 ;; Registers used:
  2203 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2204 ;; Tracked objects:
  2205 ;;		On entry : 0/0
  2206 ;;		On exit  : 0/0
  2207 ;;		Unchanged: 0/0
  2208 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2209 ;;      Params:         2       0       0       0       0
  2210 ;;      Locals:         2       0       0       0       0
  2211 ;;      Temps:          2       0       0       0       0
  2212 ;;      Totals:         6       0       0       0       0
  2213 ;;Total ram usage:        6 bytes
  2214 ;; Hardware stack levels used: 1
  2215 ;; Hardware stack levels required when called: 1
  2216 ;; This function calls:
  2217 ;;		_ADC_init_channel
  2218 ;; This function is called by:
  2219 ;;		_main
  2220 ;; This function uses a non-reentrant model
  2221 ;;
  2222                           
  2223                           
  2224                           ;psect for function _ADC_burst
  2225  0551                     _ADC_burst:
  2226                           
  2227                           ;incstack = 0
  2228                           ; Regs used in _ADC_burst: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2229                           ;ADC_burst@channels stored from wreg
  2230  0551  00F7               	movwf	ADC_burst@channels
  2231  0552                     l1186:
  2232                           
  2233                           ;ADC.c: 64: void ADC_burst(uint8_t *channels,uint16_t *reading,uint8_t numberc);ADC.c: 6
      +                          5: {;ADC.c: 66:     for(uint8_t n=0;n<numberc;n++ )
  2234  0552  01F8               	clrf	ADC_burst@n
  2235  0553  2D7B               	goto	l1194
  2236  0554                     l1188:
  2237                           
  2238                           ;ADC.c: 67:     {;ADC.c: 68:         ADC_init_channel(channels[n]);
  2239  0554  0878               	movf	ADC_burst@n,w
  2240  0555  0777               	addwf	ADC_burst@channels,w
  2241  0556  00F5               	movwf	??_ADC_burst
  2242  0557  0875               	movf	??_ADC_burst,w
  2243  0558  0084               	movwf	4
  2244  0559  1383               	bcf	3,7	;select IRP bank0
  2245  055A  0800               	movf	0,w
  2246  055B  120A  118A  24E3  120A  118A  	fcall	_ADC_init_channel
  2247  0560                     l39:	
  2248                           ;ADC.c: 69:         while(ADCON0bits.GO_DONE);
  2249                           
  2250  0560  1283               	bcf	3,5	;RP0=0, select bank0
  2251  0561  1303               	bcf	3,6	;RP1=0, select bank0
  2252  0562  189F               	btfsc	31,1	;volatile
  2253  0563  2D65               	goto	u691
  2254  0564  2D66               	goto	u690
  2255  0565                     u691:
  2256  0565  2D60               	goto	l39
  2257  0566                     u690:
  2258  0566                     l1190:
  2259                           
  2260                           ;ADC.c: 70:         reading[n] = (ADRESH << 8) + ADRESL;
  2261  0566  0878               	movf	ADC_burst@n,w
  2262  0567  00F5               	movwf	??_ADC_burst
  2263  0568  0775               	addwf	??_ADC_burst,w
  2264  0569  0773               	addwf	ADC_burst@reading,w
  2265  056A  00F6               	movwf	??_ADC_burst+1
  2266  056B  0876               	movf	??_ADC_burst+1,w
  2267  056C  0084               	movwf	4
  2268  056D  1683               	bsf	3,5	;RP0=1, select bank1
  2269  056E  1303               	bcf	3,6	;RP1=0, select bank1
  2270  056F  081E               	movf	30,w	;volatile
  2271  0570  1383               	bcf	3,7	;select IRP bank0
  2272  0571  0080               	movwf	0
  2273  0572  0A84               	incf	4,f
  2274  0573  1283               	bcf	3,5	;RP0=0, select bank0
  2275  0574  1303               	bcf	3,6	;RP1=0, select bank0
  2276  0575  081E               	movf	30,w	;volatile
  2277  0576  0080               	movwf	0
  2278  0577                     l1192:
  2279                           
  2280                           ;ADC.c: 71:     }
  2281  0577  3001               	movlw	1
  2282  0578  00F5               	movwf	??_ADC_burst
  2283  0579  0875               	movf	??_ADC_burst,w
  2284  057A  07F8               	addwf	ADC_burst@n,f
  2285  057B                     l1194:
  2286  057B  0874               	movf	ADC_burst@numberc,w
  2287  057C  0278               	subwf	ADC_burst@n,w
  2288  057D  1C03               	skipc
  2289  057E  2D80               	goto	u701
  2290  057F  2D81               	goto	u700
  2291  0580                     u701:
  2292  0580  2D54               	goto	l1188
  2293  0581                     u700:
  2294  0581                     l43:
  2295  0581  0008               	return
  2296  0582                     __end_of_ADC_burst:
  2297                           
  2298                           	psect	text12
  2299  04E3                     __ptext12:	
  2300 ;; *************** function _ADC_init_channel *****************
  2301 ;; Defined at:
  2302 ;;		line 19 in file "ADC.c"
  2303 ;; Parameters:    Size  Location     Type
  2304 ;;  channel         1    wreg     unsigned char 
  2305 ;; Auto vars:     Size  Location     Type
  2306 ;;  channel         1    2[COMMON] unsigned char 
  2307 ;; Return value:  Size  Location     Type
  2308 ;;                  1    wreg      void 
  2309 ;; Registers used:
  2310 ;;		wreg, status,2, status,0
  2311 ;; Tracked objects:
  2312 ;;		On entry : 0/0
  2313 ;;		On exit  : 0/0
  2314 ;;		Unchanged: 0/0
  2315 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2316 ;;      Params:         0       0       0       0       0
  2317 ;;      Locals:         1       0       0       0       0
  2318 ;;      Temps:          2       0       0       0       0
  2319 ;;      Totals:         3       0       0       0       0
  2320 ;;Total ram usage:        3 bytes
  2321 ;; Hardware stack levels used: 1
  2322 ;; This function calls:
  2323 ;;		Nothing
  2324 ;; This function is called by:
  2325 ;;		_ADC_burst
  2326 ;; This function uses a non-reentrant model
  2327 ;;
  2328                           
  2329                           
  2330                           ;psect for function _ADC_init_channel
  2331  04E3                     _ADC_init_channel:
  2332                           
  2333                           ;incstack = 0
  2334                           ; Regs used in _ADC_init_channel: [wreg+status,2+status,0]
  2335                           ;ADC_init_channel@channel stored from wreg
  2336  04E3  00F2               	movwf	ADC_init_channel@channel
  2337  04E4                     l1150:
  2338                           
  2339                           ;ADC.c: 19: void ADC_init_channel(char channel);ADC.c: 20: {;ADC.c: 22:     ADCON0 = 0x8
      +                          1;
  2340  04E4  3081               	movlw	129
  2341  04E5  1283               	bcf	3,5	;RP0=0, select bank0
  2342  04E6  1303               	bcf	3,6	;RP1=0, select bank0
  2343  04E7  009F               	movwf	31	;volatile
  2344                           
  2345                           ;ADC.c: 23:     ADCON1 = 0x80;
  2346  04E8  3080               	movlw	128
  2347  04E9  1683               	bsf	3,5	;RP0=1, select bank1
  2348  04EA  1303               	bcf	3,6	;RP1=0, select bank1
  2349  04EB  009F               	movwf	31	;volatile
  2350  04EC                     l1152:
  2351                           
  2352                           ;ADC.c: 24:     ADCON0 |= (channel<<2);
  2353  04EC  0872               	movf	ADC_init_channel@channel,w	;volatile
  2354  04ED  00F0               	movwf	??_ADC_init_channel
  2355  04EE  3001               	movlw	1
  2356  04EF                     u615:
  2357  04EF  1003               	clrc
  2358  04F0  0DF0               	rlf	??_ADC_init_channel,f
  2359  04F1  3EFF               	addlw	-1
  2360  04F2  1D03               	skipz
  2361  04F3  2CEF               	goto	u615
  2362  04F4  1003               	clrc
  2363  04F5  0D70               	rlf	??_ADC_init_channel,w
  2364  04F6  00F1               	movwf	??_ADC_init_channel+1
  2365  04F7  0871               	movf	??_ADC_init_channel+1,w
  2366  04F8  1283               	bcf	3,5	;RP0=0, select bank0
  2367  04F9  1303               	bcf	3,6	;RP1=0, select bank0
  2368  04FA  049F               	iorwf	31,f	;volatile
  2369  04FB                     l1154:
  2370                           
  2371                           ;ADC.c: 35:     _delay((unsigned long)((30)*(16000000/4000000.0)));
  2372  04FB  3027               	movlw	39
  2373  04FC  00F0               	movwf	??_ADC_init_channel
  2374  04FD                     u747:
  2375  04FD  0BF0               	decfsz	??_ADC_init_channel,f
  2376  04FE  2CFD               	goto	u747
  2377  04FF  2D00               	nop2
  2378  0500                     l1156:
  2379                           
  2380                           ;ADC.c: 38:     GO_DONE = 1;
  2381  0500  1283               	bcf	3,5	;RP0=0, select bank0
  2382  0501  1303               	bcf	3,6	;RP1=0, select bank0
  2383  0502  149F               	bsf	31,1	;volatile
  2384  0503                     l31:
  2385  0503  0008               	return
  2386  0504                     __end_of_ADC_init_channel:
  2387  007E                     btemp	set	126	;btemp
  2388  007E                     wtemp0	set	126
  2389                           
  2390                           	psect	config
  2391                           
  2392                           ;Config register CONFIG1 @ 0x2007
  2393                           ;	Oscillator Selection bits
  2394                           ;	FOSC = HS, HS oscillator: High-speed crystal/resonator on RA6/OSC2/CLKOUT and RA7/OSC1
      +                          /CLKIN
  2395                           ;	Watchdog Timer Enable bit
  2396                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  2397                           ;	Power-up Timer Enable bit
  2398                           ;	PWRTE = OFF, PWRT disabled
  2399                           ;	RE3/MCLR pin function select bit
  2400                           ;	MCLRE = ON, RE3/MCLR pin function is MCLR
  2401                           ;	Code Protection bit
  2402                           ;	CP = OFF, Program memory code protection is disabled
  2403                           ;	Data Code Protection bit
  2404                           ;	CPD = OFF, Data memory code protection is disabled
  2405                           ;	Brown Out Reset Selection bits
  2406                           ;	BOREN = OFF, BOR disabled
  2407                           ;	Internal External Switchover bit
  2408                           ;	IESO = ON, Internal/External Switchover mode is enabled
  2409                           ;	Fail-Safe Clock Monitor Enabled bit
  2410                           ;	FCMEN = ON, Fail-Safe Clock Monitor is enabled
  2411                           ;	Low Voltage Programming Enable bit
  2412                           ;	LVP = ON, RB3/PGM pin has PGM function, low voltage programming enabled
  2413                           ;	In-Circuit Debugger Mode bit
  2414                           ;	DEBUG = 0x1, unprogrammed default
  2415  2007                     	org	8199
  2416  2007  3CF2               	dw	15602
  2417                           
  2418                           ;Config register CONFIG2 @ 0x2008
  2419                           ;	Brown-out Reset Selection bit
  2420                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
  2421                           ;	Flash Program Memory Self Write Enable bits
  2422                           ;	WRT = OFF, Write protection off
  2423  2008                     	org	8200
  2424  2008  3FFF               	dw	16383

Data Sizes:
    Strings     4
    Constant    10
    Data        28
    BSS         18
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     34      80
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(1) Largest target is 20
		 -> mensaje(BANK0[20]), UART_number@buffer(BANK0[10]), 

    strlen@cp	PTR const unsigned char  size(1) Largest target is 20
		 -> mensaje(BANK0[20]), UART_number@buffer(BANK0[10]), 

    sprintf@f	PTR const unsigned char  size(1) Largest target is 4
		 -> STR_1(CODE[4]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 10
		 -> UART_number@buffer(BANK0[10]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    UART_Buffer@buffer	PTR unsigned char  size(1) Largest target is 20
		 -> mensaje(BANK0[20]), UART_number@buffer(BANK0[10]), 

    ADC_print_burst@BurstReadings	PTR unsigned int  size(1) Largest target is 16
		 -> ANRead(BANK0[16]), 

    ADC_burst@reading	PTR unsigned int  size(1) Largest target is 16
		 -> ANRead(BANK0[16]), 

    ADC_burst@channels	PTR unsigned char  size(1) Largest target is 8
		 -> ANChannels(BANK0[8]), 


Critical Paths under _main in COMMON

    _UART_TX_Init->___lldiv
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _UART_Buffer->_strlen
    _ADC_burst->_ADC_init_channel

Critical Paths under _main in BANK0

    _main->_ADC_print_burst
    _ADC_print_burst->_UART_number
    _UART_number->_sprintf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    3312
                                             31 BANK0      3     3      0
                          _ADC_burst
                    _ADC_print_burst
                        _UART_Buffer
                       _UART_TX_Init
                             _strlen
 ---------------------------------------------------------------------------------
 (1) _UART_TX_Init                                        10     6      4     435
                                              0 BANK0     10     6      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             14     6      8     314
                                              0 COMMON    14     6      8
 ---------------------------------------------------------------------------------
 (1) _ADC_print_burst                                      5     4      1    2071
                                             26 BANK0      5     4      1
                         _UART_Write
                        _UART_number
 ---------------------------------------------------------------------------------
 (2) _UART_number                                         13    11      2    1850
                                             13 BANK0     13    11      2
                        _UART_Buffer
                            _sprintf
                             _strlen
 ---------------------------------------------------------------------------------
 (1) _strlen                                               5     3      2     156
                                              0 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             21    18      3    1211
                                              0 BANK0     13    10      3
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              6     2      4     311
                                              8 COMMON     6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              8     4      4     314
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (1) _UART_Buffer                                          4     3      1     309
                                              5 COMMON     4     3      1
                         _UART_Write
                             _strlen (ARG)
 ---------------------------------------------------------------------------------
 (2) _UART_Write                                           1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ADC_burst                                            6     4      2     341
                                              3 COMMON     6     4      2
                   _ADC_init_channel
 ---------------------------------------------------------------------------------
 (2) _ADC_init_channel                                     3     3      0      22
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_burst
     _ADC_init_channel
   _ADC_print_burst
     _UART_Write
     _UART_number
       _UART_Buffer
         _UART_Write
         _strlen (ARG)
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
       _strlen
   _UART_Buffer
   _UART_TX_Init
     ___lldiv
   _strlen

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     22      50       5      100.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      5E      12        0.0%
ABS                  0      0      5E       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Mon Aug 09 14:42:31 2021

                            pc 0002                             l31 0503                             l43 0581  
                           l39 0560                             l49 0550                             l82 047F  
                           l91 04C6                             l76 05FC                             l94 0526  
                           l79 0475                             fsr 0004             __size_of_ADC_burst 0031  
                          l234 07E5                            l510 0640                            l520 05BB  
                          l274 06FD                            l692 04AB                            _GIE 005F  
                          _RC1 0039                            u410 0617                            u411 0616  
                          u405 0609                            u430 0628                            u510 05B7  
                          u431 0627                            u511 05B6                            u520 04C6  
                          u600 04A5                            u521 04C5                            u425 0618  
                          u505 05AB                            u601 04A4                            u450 063C  
                          u530 070C                            u451 063B                            u435 0624  
                          u531 070B                            u700 0581                            u380 047B  
                          u460 0588                            u540 0746                            u620 06A8  
                          u701 0580                            u381 047A                            u445 0630  
                          u461 0587                            u541 0745                            u621 06A7  
                          u390 0605                            u550 076C                            u710 054A  
                          u615 04EF                            u391 0604                            u551 076B  
                          u711 0549                            u480 059A                            u560 0777  
                          u640 06BC                            u720 05E3                            u481 0599  
                          u561 0776                            u641 06BB                            u490 05A4  
                          u570 077D                            u491 05A3                            u475 058C  
                          u571 077C                            u555 0768                            u635 06AD  
                          u580 07CF                            u660 06D7                            u581 07CE  
                          u661 06D6                            u725 05DE                            u590 07E1  
                          u495 05A0                            u591 07E0                            u655 06BE  
                          u680 06F5                            u681 06F4                            u665 06D3  
                          u737 068D                            u690 0566                            u747 04FD  
                          u691 0565                            u675 06E7                            fsr0 0004  
                          indf 0000                           l1020 05FD                           l1100 074A  
                         l1030 0613                           l1022 05FF                           l1102 074F  
                         l1016 0475                           l1040 0636                           l1032 0617  
                         l1024 0605                           l1120 0788                           l1112 076D  
                         l1200 053E                           l1018 047B                           l1034 0628  
                         l1026 0608                           l1042 063C                           l1050 058B  
                         l1122 078D                           l1114 0777                           l1130 07CF  
                         l1202 0544                           l1210 05EE                           l1036 062E  
                         l1028 060F                           l1060 05AA                           l1052 0592  
                         l1124 07BB                           l1116 077D                           l1108 0751  
                         l1132 07E1                           l1140 0494                           l1204 054A  
                         l1212 05F4                           l1220 0641                           l1150 04E4  
                         l1070 04AF                           l1038 062F                           l1062 05B1  
                         l1054 0596                           l1046 0582                           l1126 07C2  
                         l1118 0784                           l1142 0499                           l1214 05F5  
                         l1206 05BC                           l1230 0676                           l1222 0650  
                         l1152 04EC                           l1072 04B8                           l1056 059A  
                         l1048 0588                           l1064 05B7                           l1128 07C6  
                         l1080 0706                           l1144 049D                           l1160 0514  
                         l1216 05F8                           l1208 05EB                           l1232 0682  
                         l1224 0662                           l1154 04FB                           l1074 04BC  
                         l1058 05A4                           l1090 0719                           l1082 070C  
                         l1146 04A5                           l1170 06BC                           l1162 0698  
                         l1218 05FB                           l1234 0685                           l1226 0665  
                         l1156 0500                           l1076 04C0                           l1068 04AD  
                         l1092 0736                           l1084 0713                           l1180 06EF  
                         l1172 06C5                           l1164 06A8                           l1228 0668  
                         l1190 0566                           l1094 073E                           l1086 0718  
                         l1078 0701                           l1158 0504                           l1174 06D7  
                         l1166 06AB                           l1182 06F5                           l1192 0577  
                         l1096 0742                           l1256 072B                           l1176 06E5  
                         l1168 06B8                           l1194 057B                           l1186 0552  
                         l1098 0746                           l1178 06E6                           l1188 0554  
                         l1196 052A                           l1198 052C                           _ADIE 0466  
                         _ADIF 0066                           STR_1 0013                           _BRGH 04C2  
             ?_ADC_print_burst 003A                           _PEIE 005E                           _SPEN 00C7  
                         _TRMT 04C1                           _TXEN 04C5                           _SYNC 04C4  
                         _main 0641                           btemp 007E                           start 0000  
    __size_of_ADC_init_channel 0021  ADC_print_burst@NumberReadings 003A                          ?_main 0070  
              __end_of___lldiv 06FE                __end_of___lwdiv 0641                __end_of___lwmod 05BC  
                        _SPBRG 0099                          _TXREG 0019                    ?_UART_Write 0070  
              __end_of_dpowers 0013                          pclath 000A                          status 0003  
                        wtemp0 007E                __end_of_sprintf 07E6              __end_of_ADC_burst 0582  
              __initialization 07E6                   __end_of_main 0698                         ??_main 003F  
                       _ADCON0 001F                         _ADCON1 009F                         _ADRESH 001E  
                       _ADRESL 009E                         _ANRead 0060                         _TRISC1 0439  
                       _TRISC6 043E                   ?_UART_Buffer 0075            __size_of_UART_Write 000C  
             UART_TX_Init@baud 0020                      ??___lldiv 0078              ADC_burst@channels 0077  
                    ??___lwdiv 0074               UART_TX_Init@temp 0029                      ??___lwmod 007C  
                 ?_UART_number 002D                         _strlen 0493                      ??_sprintf 0023  
             UART_Buffer@count 0077        __end_of__initialization 07FC               _ADC_init_channel 04E3  
               __pcstackCOMMON 0070                   __pidataBANK0 04C7                     __pbssBANK0 005E  
             ADC_print_burst@n 003E                     __pmaintext 0641                        _AN0_RES 005E  
                      ?_strlen 0070                        _GO_DONE 00F9                   ??_UART_Write 0070  
                ?_UART_TX_Init 0020                     __stringtab 0003                     ADC_burst@n 0078  
     __size_of_ADC_print_burst 002A           __size_of_UART_Buffer 001B                      _ADC_burst 0551  
                      ___lldiv 0698             __end_of_UART_Write 0480                        ___lwdiv 05FD  
                      ___lwmod 0582                        __ptext1 05BC                        __ptext2 0698  
                      __ptext3 0527                        __ptext4 0504                        __ptext5 0493  
                      __ptext6 06FE                        __ptext7 0582                        __ptext8 05FD  
                      __ptext9 04AC           __size_of_UART_number 0023                __size_of_strlen 0019  
                      _dpowers 0009                        _mensaje 0042                 ??_UART_TX_Init 0024  
                      _sprintf 06FE                        clrloop0 046D           end_of_initialization 07FC  
              ___lldiv@divisor 0070                ___lldiv@counter 007D                     ?_ADC_burst 0073  
                      strlen@s 0074                 UART_Write@data 0070              UART_Buffer@buffer 0078  
     __end_of_ADC_init_channel 0504              ??_ADC_print_burst 003B              UART_number@buffer 0030  
               __end_of_strlen 04AC              UART_number@number 002D            start_initialization 07E6  
                  ??_ADC_burst 0075                     init_fetch0 0480           __end_of_UART_TX_Init 05FD  
                  __pdataBANK0 0042               ADC_burst@reading 0073                       ??_strlen 0072  
             ADC_burst@numberc 0074                UART_Buffer@size 0075                      ___latbits 0002  
                __pcstackBANK0 0020                    sprintf@flag 0027                    sprintf@prec 0028  
             ___lwdiv@dividend 0072   ADC_print_burst@BurstReadings 003D                       ?___lldiv 0070  
                     ?___lwdiv 0070                       ?___lwmod 0078                      __pstrings 0003  
             ___lwdiv@quotient 0075                       ?_sprintf 0020                  ??_UART_Buffer 0076  
                    clear_ram0 046C                  ??_UART_number 002F                     _ADCON0bits 001F  
                  __stringbase 0008              ?_ADC_init_channel 0070             ??_ADC_init_channel 0070  
              _ADC_print_burst 0527          __size_of_UART_TX_Init 0041            __end_of_UART_Buffer 04C7  
             __size_of___lldiv 0066               __size_of___lwdiv 0044               __size_of___lwmod 003A  
           __end_of__stringtab 0009                     sprintf@val 0029            __end_of_UART_number 0527  
              ___lwdiv@divisor 0070                ___lwdiv@counter 0077                       __ptext10 0474  
                     __ptext11 0551                       __ptext12 04E3               __size_of_sprintf 00E8  
                 _UART_TX_Init 05BC                     _ANChannels 0056                  __size_of_main 0057  
                     init_ram0 0484        ADC_init_channel@channel 0072        __end_of_ADC_print_burst 0551  
                    sprintf@ap 0026                      sprintf@sp 002B               ___lwmod@dividend 007A  
             ___lldiv@dividend 0074                    _UART_Buffer 04AC                      stringcode 0003  
                  _UART_number 0504                       sprintf@c 002C                       sprintf@f 0020  
             ___lldiv@quotient 0079                ___lwmod@divisor 0078                       strlen@cp 0073  
              ___lwmod@counter 007D                       stringdir 0003                       stringtab 0003  
                   _UART_Write 0474  
